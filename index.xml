<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ilona Who Codes</title>
    <link>https://ilonacodes.github.io/index.xml</link>
    <description>Recent content on Ilona Who Codes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 19 Oct 2017 08:30:05 +0100</lastBuildDate>
    <atom:link href="https://ilonacodes.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>React.js &amp; React Native Meetup at Home24 in Berlin</title>
      <link>https://ilonacodes.github.io/blog/react-meetup-at-home24-berlin/</link>
      <pubDate>Thu, 19 Oct 2017 08:30:05 +0100</pubDate>
      
      <guid>https://ilonacodes.github.io/blog/react-meetup-at-home24-berlin/</guid>
      <description>&lt;p&gt;Hey, there! In this blog post, I’m going to share my impression about the React.js &amp;amp; React Native meetup in Berlin that I have visited at Home24 yesterday.&lt;/p&gt;

&lt;p&gt;If you still didn&amp;rsquo;t have a look at the topic of my blog, so, as you noticed from the title, I am interested in front-end development and at the moments specialized in the JavaScript language and especially in React framework.&lt;/p&gt;

&lt;p&gt;Close to the point, I would like to tell you a couple of words about the last meetup.&lt;/p&gt;

&lt;p&gt;Traditionally, there were three talks, breaks, pizza+bier, and, definitely, the opportunity for networking and communicating with each other.&lt;/p&gt;

&lt;p&gt;Now I’m going to tell you about the talks.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://ilonacodes.github.io/blog/images/react-meetup-1.jpg&#34; alt=&#34;Photo-1&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The first speaker, Shahjada Talukdar, Frontend Engineer at Perdoo presented &lt;code&gt;Build your dream app with CRA (Create React App)&lt;/code&gt;:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;How to build a simple app with Create React App (CRA) using the simple command &lt;code&gt;create-react-app name&lt;/code&gt; in the terminal;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;How to start/build/eject with &lt;a href=&#34;https://yarnpkg.com/lang/en/&#34;&gt;yarn&lt;/a&gt; that serving local and on network;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Why we should be using &lt;a href=&#34;https://developers.google.com/web/fundamentals/primers/service-workers/?hl=en&#34;&gt;service worker&lt;/a&gt; that controls what happens on a request-by-request basis and also allows React apps working offline.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;https://ilonacodes.github.io/blog/images/react-meetup-2.jpg&#34; alt=&#34;Photo-2&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The second talk called &lt;code&gt;React SSR featuring AWS Lambda&lt;/code&gt; by George Lolos, Frontend Squad Leader at Home24 AG.&lt;/p&gt;

&lt;p&gt;The talk is about how to improve the performance, how to structure React app and how to solve small problems in front-end part. They’ve also told us about React SSR (Server Side Rendering).&lt;/p&gt;

&lt;p&gt;React SSR renders basic pages, and AWS Lambda runs code without managing servers. And the biggest challenge was the massive size of Lambda. So, the speaker shared with us approaches how to minify it and the result that they have achieved.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://ilonacodes.github.io/blog/images/react-meetup-3.jpg&#34; alt=&#34;Photo-3&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Last but not least, the third talk &lt;code&gt;Beyond JavaScript: The Hidden Benefit of React Native&lt;/code&gt; by Wojciech Ogrodowczyk, Partner at Brains &amp;amp; Beards.&lt;/p&gt;

&lt;p&gt;The talk refers to choosing an optimal programming language to optimize and to improve the performance of the code. The speaker also mentioned an approach how to solve the language problem.&lt;/p&gt;

&lt;p&gt;For example, by dividing the team into groups. Then every group should decide which programming language they will choose.&lt;/p&gt;

&lt;p&gt;Then they will implement a small project during the next couple of months. In the end, they will compare the performance of every group relative to each other.&lt;/p&gt;

&lt;p&gt;However, we shouldn&amp;rsquo;t forget that in computer science everything depends on team skills, personality, and other things.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://ilonacodes.github.io/blog/images/react-meetup-4.jpg&#34; alt=&#34;Photo-4&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I have shared my thoughts and opinions above on how I understood the topics of the talks.&lt;/p&gt;

&lt;p&gt;If you are located close to where React.js &amp;amp; React Native community meets and interested in front-end, then I highly recommend you to visit such meetings and get to learn more about it from competent people.&lt;/p&gt;

&lt;p&gt;Thank you for the reading! Have a nice week!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>What Did I Learn at Codemotion Berlin 2017</title>
      <link>https://ilonacodes.github.io/blog/what-did-i-learn-at-codemotion-berlin-2017/</link>
      <pubDate>Sat, 14 Oct 2017 22:30:05 +0100</pubDate>
      
      <guid>https://ilonacodes.github.io/blog/what-did-i-learn-at-codemotion-berlin-2017/</guid>
      <description>

&lt;p&gt;Hi, everyone!&lt;/p&gt;

&lt;p&gt;As you noticed, I post a new blog post about the development of an interactive ToDo list regularly, every five days. But today I am going to tell you about the international IT-conference &lt;a href=&#34;https://berlin2017.codemotionworld.com/&#34;&gt;Codemotion&lt;/a&gt;, that I have attended on 12-13. October in Berlin.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://ilonacodes.github.io/blog/images/codemotion.JPG&#34; alt=&#34;Codemotion&#34; /&gt;&lt;/p&gt;

&lt;p&gt;There were a lot of informative and motivational topics, that can inspire everyone, who are interested or work in IT-branch.&lt;/p&gt;

&lt;p&gt;All talks occurred in four different spaces and referred by the topic of the sessions. For example, in &lt;code&gt;Maschinenhaus&lt;/code&gt; speakers gave a speech mostly about technologies and practical approaches that they use. In &lt;code&gt;Community Stage&lt;/code&gt; the talks were related to motivational topics, discussing programming languages.&lt;/p&gt;

&lt;p&gt;Also, there took place &lt;code&gt;Ruby on Rails Workshop&lt;/code&gt;. The full agenda of the conference you can check below:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://ilonacodes.github.io/blog/images/agenda-12-10.jpg&#34; alt=&#34;Agenda-1&#34; /&gt;
&lt;img src=&#34;https://ilonacodes.github.io/blog/images/agenda-13-10.jpg&#34; alt=&#34;Agenda-2&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The most interesting talks for me as a frontend developer, I included to &lt;code&gt;My Favorites&lt;/code&gt; list.&lt;/p&gt;

&lt;p&gt;I would like to share more information about them with you:&lt;/p&gt;

&lt;h3 id=&#34;frontend-frameworkless-development-by-francesco-strazzullo-exstrategy&#34;&gt;&lt;code&gt;Frontend Frameworkless Development&lt;/code&gt; by Francesco Strazzullo | exstrategy&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://ilonacodes.github.io/blog/images/speaker-1.JPG&#34; alt=&#34;Speaker-1&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The idea of the talk based on the possibility to develop new apps, new features for apps while not using any frameworks. The example code, the empty forms, are written in &lt;code&gt;Vanilla JavaScript&lt;/code&gt; replacing &lt;code&gt;React+Redux&lt;/code&gt; frameworks for that.&lt;/p&gt;

&lt;p&gt;Firstly, the speaker showed us that there is no dependency in &lt;code&gt;package.json&lt;/code&gt; (the file that includes all dependencies and configures the project).&lt;/p&gt;

&lt;p&gt;Then they have implemented the function that is similar to ReactDOM rendering.&lt;/p&gt;

&lt;p&gt;Next, they have replaced Redux features by creating variables &lt;code&gt;store&lt;/code&gt;, &lt;code&gt;state&lt;/code&gt;. They handle the current and calculation of the new state. Finally, they store new state back to &lt;code&gt;store&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The conclusion.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s possible to write clean code without using any frameworks. Vanilla JavaScript still will be alive for the next tens of years.&lt;/p&gt;

&lt;p&gt;Frameworks might die the following year.&lt;/p&gt;

&lt;h3 id=&#34;how-to-rock-the-stage-public-speaking-for-geeks-by-lorenzo-barbieri-microsoft-western-europe&#34;&gt;&lt;code&gt;How to rock the stage: public speaking for geeks&lt;/code&gt; by Lorenzo Barbieri | Microsoft Western Europe&lt;/h3&gt;

&lt;p&gt;I am an introvert.&lt;/p&gt;

&lt;p&gt;Naturally, I have found this talk extremely useful for me. It is on how to improve my soft skills by speaking not only in front of the people but also with others.&lt;/p&gt;

&lt;p&gt;The slide on the photo below describes some “icebreakers” that allow starting, keeping, and controlling a conversation in life, and on the stage.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://ilonacodes.github.io/blog/images/speaker-2.JPG&#34; alt=&#34;Speaker-2&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;build-bridges-not-walls-design-for-users-across-cultures-by-jenny-shen-toptal&#34;&gt;&lt;code&gt;Build bridges, not walls - Design for users across cultures&lt;/code&gt; by Jenny Shen | Toptal&lt;/h3&gt;

&lt;p&gt;I was lucky to meet and speak personally with the speaker &lt;a href=&#34;http://jennyshen.com/&#34;&gt;Jenny Shen&lt;/a&gt;. They have worked in five countries before and currently are based in Amsterdam.&lt;/p&gt;

&lt;p&gt;Using illustrative examples, Jenny showed us how important it is to know the culture of society you are developing for.&lt;/p&gt;

&lt;p&gt;What kinds of problems can appear in design? Which data should be taken into account to make people of different cultures happy?&lt;/p&gt;

&lt;p&gt;I have already moved to another country once. I can relate to that so much.&lt;/p&gt;

&lt;p&gt;Most of my development projects are for multicultural users. I think it is necessary to know most common obstacles that I could meet on my &amp;ldquo;development&amp;rdquo; path.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://ilonacodes.github.io/blog/images/speaker-3.JPG&#34; alt=&#34;Speaker-3&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://codemotionworld.com/&#34;&gt;Codemotion&lt;/a&gt; conferences are worldwide.&lt;/p&gt;

&lt;p&gt;They are suitable for any professional level of IT-people with different backgrounds. That helps to get to know more about IT-world at its current state.&lt;/p&gt;

&lt;p&gt;It is fantastic to participate in workshops, and network with amazing people.&lt;/p&gt;

&lt;p&gt;Thank you for reading!&lt;/p&gt;

&lt;p&gt;I will be glad to answer any questions about my impression. Feel free to give any feedback for this post.&lt;/p&gt;

&lt;p&gt;You can find me on &lt;a href=&#34;https://www.instagram.com/ilonacodes/&#34;&gt;Instagram&lt;/a&gt; or send me a private letter on my &lt;a href=&#34;mailto:demiluri@gmail.com&#34;&gt;email&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Cheers!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Persisting data using local storage with React&#43;Redux</title>
      <link>https://ilonacodes.github.io/blog/persisting-data-using-local-storage-react-redux/</link>
      <pubDate>Tue, 10 Oct 2017 12:30:05 +0100</pubDate>
      
      <guid>https://ilonacodes.github.io/blog/persisting-data-using-local-storage-react-redux/</guid>
      <description>&lt;p&gt;Let&amp;rsquo;s continue developing an Interactive ToDo List. Refer to the &lt;a href=&#34;http://www.ilonacodes.com/blog/react-for-very-very-beginners/&#34;&gt;previous posts&lt;/a&gt; you notice that we are almost done with the basic functionality of the application. And today I would like to start the topic about persisting the data and restoring it after refreshing the page or starting a new session on the local machine with React+Redux.&lt;/p&gt;

&lt;p&gt;Changing into the &lt;code&gt;my-daily-todos&lt;/code&gt; project, then to &lt;code&gt;src&lt;/code&gt; folder where you find &lt;code&gt;index.js&lt;/code&gt;. Here we store all the app’s state in the &lt;code&gt;store&lt;/code&gt; variable. Now we are also going to add a new variable that will keep the initial state and a new constant &lt;code&gt;persistedState&lt;/code&gt; that allows us to get the persisted state from store passing to method &lt;code&gt;getItem&lt;/code&gt; of &lt;code&gt;localStorage&lt;/code&gt; =&amp;gt; &lt;code&gt;localStorage.getItem(&#39;reduxState&#39;)&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;So, the &lt;code&gt;initState&lt;/code&gt; variable has the default value – empty &lt;code&gt;{}&lt;/code&gt;. If there is no persisted state in the local storage, it is going to stay empty.&lt;/p&gt;

&lt;p&gt;On the other hand, when there is some persisted state in the local storage, we are going to load that state and set &lt;code&gt;initState&lt;/code&gt; to value, that we have just loaded.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// my-daily-todos/src/index.js

...

import { App } from &#39;./App.js&#39;;
import { tasksReducer } from &#39;./Tasks/reducers.js&#39;;
import &#39;./index.css&#39;;

let initState = {}
const persistedState = localStorage.getItem(&#39;reduxState&#39;)

// if persistedState is not empty then assign parsed persistedState to initState
if (persistedState) {
  initState = JSON.parse(persistedState)
}

...

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;span style=&#34;color:red&#34;&gt;Notice that we are passing the second parameter &lt;code&gt;initState&lt;/code&gt; to &lt;code&gt;createStore&lt;/code&gt; method in &lt;code&gt;store&lt;/code&gt;. The second parameter of &lt;code&gt;createStore&lt;/code&gt; function is for setting the initial state of the store when the application is launched:&lt;/span&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// my-daily-todos/src/index.js

...

let store = createStore(
  combineReducers({
    tasks: tasksReducer,
  }),
  initState
);

...

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Onward!&lt;/p&gt;

&lt;p&gt;We are going to use &lt;code&gt;subscribe&lt;/code&gt; method of our &lt;code&gt;store&lt;/code&gt;. That method will trigger the function we provide every time there is any change to the application state.&lt;/p&gt;

&lt;p&gt;We are going to supply a function that will get the whole state from the store using &lt;code&gt;getState()&lt;/code&gt; method of &lt;code&gt;store&lt;/code&gt;. Then it is going to convert that state object to a string using &lt;code&gt;JSON.stringify()&lt;/code&gt;. Finally, it is going to persist that state using &lt;code&gt;localStorage.setItem()&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// my-daily-todos/src/index.js

...

store.subscribe(() =&amp;gt; {
  localStorage.setItem(&#39;reduxState&#39;, JSON.stringify(store.getState()))
})

...

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s it.&lt;/p&gt;

&lt;p&gt;To check how it works run the local server on your computer in the project folder with the &lt;code&gt;npm start&lt;/code&gt; command. Afterwards, try to add and categorize some tasks by tags, then close the tab with the application or refresh the page to see that the data is stored successfully.&lt;/p&gt;

&lt;p&gt;Did you find another way how to implement it in our project? Let me know by &lt;a href=&#34;mailto:demiluri@gmail.com&#34;&gt;email&lt;/a&gt; or write me a direct message on &lt;a href=&#34;https://www.instagram.com/ilonacodes/&#34;&gt;Instagram&lt;/a&gt;. That is how the &lt;code&gt;index.js&lt;/code&gt; should look like now:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// my-daily-todos/src/index.js

import React from &#39;react&#39;;
import ReactDOM from &#39;react-dom&#39;;
import { Provider } from &#39;react-redux&#39;;
import { createStore, combineReducers } from &#39;redux&#39;;

import { App } from &#39;./App.js&#39;;
import { tasksReducer } from &#39;./Tasks/reducers.js&#39;;
import &#39;./index.css&#39;;

let initState = {}
const persistedState = localStorage.getItem(&#39;reduxState&#39;)
if (persistedState) {
  initState = JSON.parse(persistedState)
}

let store = createStore(
  combineReducers({
    tasks: tasksReducer,
  }),
  initState
);

store.subscribe(() =&amp;gt; {
  localStorage.setItem(&#39;reduxState&#39;, JSON.stringify(store.getState()))
})

ReactDOM.render(
  &amp;lt;Provider store={store}&amp;gt;
    &amp;lt;App /&amp;gt;
  &amp;lt;/Provider&amp;gt;,
  document.getElementById(&#39;root&#39;)
);

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you enjoyed this post, I would be very grateful if you would help me spread the word by emailing it to a friend or sharing it on social networks. Thank you!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Dynamic progress bar with React&#43;Redux</title>
      <link>https://ilonacodes.github.io/blog/dynamic-progress-bar-with-react-redux/</link>
      <pubDate>Fri, 06 Oct 2017 19:30:05 +0100</pubDate>
      
      <guid>https://ilonacodes.github.io/blog/dynamic-progress-bar-with-react-redux/</guid>
      <description>&lt;p&gt;Hi there! I am so happy that you continue developing our interactive Daily ToDo app with me. Today you are going to get to know how to implement a dynamic progress bar that will handle task completing status by percentage for every category.&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color:red&#34;&gt;But before moving on, if you are new here, please, have a look at the &lt;a href=&#34;http://www.ilonacodes.com/blog/react-for-very-very-beginners/&#34;&gt;previous posts&lt;/a&gt;. You should start developing app there and then continue with us here.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;And now I would like to offer my approach how to add a simple but dynamic progress bar to every task category and finally, make our Daily ToDo app interactive.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s change into &lt;code&gt;my-daily-todos&lt;/code&gt; folder and start developing!&lt;/p&gt;

&lt;p&gt;Firstly, I recommend you to add a small library &lt;code&gt;w3.css&lt;/code&gt; to our &lt;code&gt;index.html&lt;/code&gt; where we store all style dependencies:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;
// my-daily-todos/public/index.html

&amp;lt;!doctype html&amp;gt;
&amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;meta charset=&amp;quot;utf-8&amp;quot;&amp;gt;
    &amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width, initial-scale=1, shrink-to-fit=no&amp;quot;&amp;gt;

    &amp;lt;link rel=&amp;quot;manifest&amp;quot; href=&amp;quot;%PUBLIC_URL%/manifest.json&amp;quot;&amp;gt;

// just add this library
    &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;https://www.w3schools.com/w3css/4/w3.css&amp;quot;&amp;gt;

    &amp;lt;title&amp;gt;React App&amp;lt;/title&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;div id=&amp;quot;root&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;span style=&#34;color:red&#34;&gt;If you open your &lt;code&gt;index.html&lt;/code&gt; for the first time, you&amp;rsquo;ll notice, that there lots of comments and some initial link tags. In this case, you can just rewrite your &lt;code&gt;index.html&lt;/code&gt; in the way that I left above.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;The dynamic progress bar belongs to the &lt;code&gt;TaskCategory.js&lt;/code&gt; component. That&amp;rsquo;s why we have to open this file and step by step implement the new feature:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;To initialize &lt;code&gt;completed_tasks&lt;/code&gt; constant, that will filter &lt;code&gt;tasks&lt;/code&gt; by &lt;code&gt;completed&lt;/code&gt; property and store them in;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;To initialize &lt;code&gt;percentage&lt;/code&gt; constant to count the percentage of completed tasks with a simple formula and to round it with &lt;code&gt;floor&lt;/code&gt; method;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Apply classes from the &lt;code&gt;w3.css&lt;/code&gt; library for tags inside the &lt;code&gt;TaskCategory.js&lt;/code&gt; component and pass the value of &lt;code&gt;percentage&lt;/code&gt;;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;
// my-daily-todos/src/Tasks/TaskCategory.js

...
export const TaskCategory = ({category, tasks, completeTask}) =&amp;gt; {

// Step 1
  const completed_tasks = tasks.filter(task =&amp;gt; task.completed);

// Step 2
  const percentage = Math.floor(completed_tasks.length / tasks.length * 100);

  return &amp;lt;div&amp;gt;
    &amp;lt;h2&amp;gt;{category}&amp;lt;/h2&amp;gt;

// Step 3
      &amp;lt;div className=&amp;quot;w3-light-grey w3-round progress-bar&amp;quot;&amp;gt;
       &amp;lt;div className=&amp;quot;w3-container w3-round w3-green progress-bar-indicator&amp;quot;
        style={{width: `${percentage}%`}}&amp;gt;
        {percentage}%
       &amp;lt;/div&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;ul&amp;gt;
    {tasks.map(task =&amp;gt;
      &amp;lt;li key={task.id}&amp;gt;
        &amp;lt;Task task={task} completeTask={completeTask} /&amp;gt;
      &amp;lt;/li&amp;gt;
    )}
    &amp;lt;/ul&amp;gt;
  &amp;lt;/div&amp;gt;
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To make things look good, we should change into &lt;code&gt;App.js&lt;/code&gt; and add styles to already created from the &lt;code&gt;w3.css&lt;/code&gt; library &lt;code&gt;.progress-bar&lt;/code&gt; and &lt;code&gt;.progress-bar-indicator&lt;/code&gt; classes:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;
// my-daily-todos/src/App.css

...

.taskslist-container .progress-bar {
   width: 30%;
   height: 25px;
   text-align: center;
   margin-bottom: 1rem;
   font-size: 11px;
 }

 .taskslist-container .progress-bar-indicator {
   height: 25px;
   padding-top: 5px;
 }

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;span style=&#34;color:red&#34;&gt;To check how it looks like, don&amp;rsquo;t forget to run a local server by the &lt;code&gt;npm start&lt;/code&gt; in the terminal in &lt;code&gt;my-daily-todos&lt;/code&gt; folder.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;You should get something like that at the end:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://ilonacodes.github.io/blog/images/progress-bar.png&#34; alt=&#34;Progress bar&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Thank you for the reading. Happily, you are enjoying developing with React+Redux and waiting for the next feature description. Have a nice coding!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Categorize tasks with React&#43;Redux</title>
      <link>https://ilonacodes.github.io/blog/categorize-tasks-with-react-redux/</link>
      <pubDate>Sun, 01 Oct 2017 19:30:05 +0100</pubDate>
      
      <guid>https://ilonacodes.github.io/blog/categorize-tasks-with-react-redux/</guid>
      <description>&lt;p&gt;The most valuable feature set for our Daily ToDo is already done. Today we are going to make an app more functional, separating tasks by categories. We want to be able to categorize task by typing &lt;code&gt;#&lt;/code&gt; and category after its title.&lt;/p&gt;

&lt;p&gt;For example: &lt;code&gt;practice a coding kata #programming&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;As always, we start with the simple &lt;code&gt;user story&lt;/code&gt; and the &lt;code&gt;acceptance criteria&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;As Bob
I want to categorize tasks by adding tag into input
So I see which task belongs to which category

## Acceptance Criteria

Given there are no tasks
And I am on dashboard screen
When I finish inputting a new task title
And choose the category (tag) for a task
And press Enter
Then I see the categorized task by tag on the dashboard screen

Tag examples: Programming, Sport, Languages, University, Reading, Routine
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;span style=&#34;color:red&#34;&gt;If you are a new reader of the tutorial series and don&amp;rsquo;t understand what is going on at the moment, then just check the previous posts starting with &lt;a href=&#34;http://www.ilonacodes.com/blog/react-for-very-very-beginners/&#34;&gt;React For Very Very Beginners&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;To add this feature,  we should extend the action &lt;code&gt;ADD_TASK&lt;/code&gt; in &lt;code&gt;reducers.js&lt;/code&gt; and add &lt;code&gt;tag&lt;/code&gt; property to a &lt;code&gt;task&lt;/code&gt; object by separating a &lt;code&gt;title&lt;/code&gt; into parts:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// my-daily-todos/src/Tasks/reducers.js

...
// As I mentioned before we will change only &amp;quot;ADD_TASK&amp;quot; action in &amp;quot;tasksReducer&amp;quot;

case t.ADD_TASK:

// split a title by &amp;quot;#&amp;quot; into two parts
      const titleParts = action.title.split(&#39;#&#39;)

// the first part is a title task, where &amp;quot;trim&amp;quot; method removes whitespace from both ends of a string
      const title = titleParts[0].trim()

// the second part is a tag
      const tag = titleParts[1]

      return [
        ...state,

// now the &amp;quot;task&amp;quot; object contains three properties: id, title, and tag
        {
          id: generateID(),
          title: title,
          tag: tag
        }
      ]
...

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;span style=&#34;color:red&#34;&gt;As usual, change into &lt;code&gt;my-daily-todos&lt;/code&gt; folder in your &lt;code&gt;workspace&lt;/code&gt; via your terminal and open the project in your favorite editor to continue implementing a new feature.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;The next step is to create a new component &lt;code&gt;TaskCategory.js&lt;/code&gt; in &lt;code&gt;Tasks&lt;/code&gt; folder that will contain and use &lt;code&gt;Task.js&lt;/code&gt; component.&lt;/p&gt;

&lt;p&gt;You heard that right, &lt;code&gt;Task.js&lt;/code&gt; component is &lt;code&gt;moving&lt;/code&gt; from &lt;code&gt;TaskList.js&lt;/code&gt; component into &lt;code&gt;TaskCategory.js&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now the &lt;code&gt;TaskList.js&lt;/code&gt; will include &lt;code&gt;TaskCategory.js&lt;/code&gt; instead of &lt;code&gt;Task.js&lt;/code&gt;. That is because we have extended the task object by a category and the &lt;code&gt;TaskList.js&lt;/code&gt; component renders all tasks that have been created through the user input field:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// my-daily-todos/src/Tasks/TaskCategory.js

import React from &#39;react&#39;;

// import `Task.js` component
import { Task } from &#39;./Task.js&#39;;

// add states and actions into TaskCategory.js to handle them
export const TaskCategory = ({category, tasks, completeTask}) =&amp;gt; {
  return &amp;lt;div&amp;gt;
// the &amp;quot;category&amp;quot; will render a &amp;quot;tag&amp;quot; name and sort tasks by tags
    &amp;lt;h2&amp;gt;{category}&amp;lt;/h2&amp;gt;

// take and add here this code snippet from &amp;quot;TaskList.js&amp;quot;
    &amp;lt;ul&amp;gt;
    {tasks.map(task =&amp;gt;
      &amp;lt;li key={task.id}&amp;gt;
        &amp;lt;Task task={task} completeTask={completeTask} /&amp;gt;
      &amp;lt;/li&amp;gt;
    )}
    &amp;lt;/ul&amp;gt;
  &amp;lt;/div&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The last changes what we have to do:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;To pass the &lt;code&gt;TaskCategory.js&lt;/code&gt; component into the &lt;code&gt;TaskList.js&lt;/code&gt; component;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;To write &lt;code&gt;unique&lt;/code&gt; function to categorize created tasks without any task duplication in a category;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;To filter tasks by a &lt;code&gt;tag&lt;/code&gt; that is equal to a &lt;code&gt;category&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To make all things work, open the &lt;code&gt;TaskList.js&lt;/code&gt; component and rewrite a little bit of code there:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// my-daily-todos/src/Tasks/TaskList.js

import React, { Component } from &#39;react&#39;;
import { connect } from &#39;react-redux&#39;;

// import &amp;quot;TaskCategory.js&amp;quot; component
import { TaskCategory } from &#39;./TaskCategory.js&#39;;

import { Task } from &#39;./Task.js&#39;;
import { actions } from &#39;./actions&#39;;

// create the &amp;quot;unique&amp;quot; method that will take &amp;quot;array&amp;quot; as an argument, remove duplicate values from an array, and return a new array
const unique = array =&amp;gt; {
  return array.filter((item, index) =&amp;gt; {
    return array.indexOf(item) === index
  })
}

const TaskListComponent = ({tasks, completeTask}) =&amp;gt; {

// apply the &amp;quot;unique&amp;quot; function for the categories array
  const categories = unique(tasks.map(task =&amp;gt; task.tag))

  return &amp;lt;div className=&amp;quot;tasklist-container&amp;quot;&amp;gt;
// make a list for every of user category and pass the &amp;quot;TaskCategory.js&amp;quot; component here
    {categories.map(category =&amp;gt;
      &amp;lt;TaskCategory
        key={category}
        category={category}
        completeTask={completeTask}

// filter array of tasks that will manage by a tag to a category
        tasks = {tasks.filter(task =&amp;gt; task.tag === category)}
      /&amp;gt;
    )}
  &amp;lt;/div&amp;gt;
}
...

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The result in the case of the categorize tasks is shown here:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://ilonacodes.github.io/blog/images/read-a-book-category.png&#34; alt=&#34;Read a book&#34; /&gt;
&lt;img src=&#34;https://ilonacodes.github.io/blog/images/do-yoga-category.png&#34; alt=&#34;Do yoga&#34; /&gt;
&lt;img src=&#34;https://ilonacodes.github.io/blog/images/categories.png&#34; alt=&#34;Categories&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Before moving on, I hope you enjoyed and understand how to categorize tasks with &lt;code&gt;React+Redux&lt;/code&gt; and ready to the next challenge (new feature) for our interactive Daily ToDo app.&lt;/p&gt;

&lt;p&gt;Thank you for the reading. If you have any questions or suggestions how it should have written on, then just get in touch with me either per &lt;a href=&#34;mailto:demiluri@gmail.com&#34;&gt;email&lt;/a&gt; or on my &lt;a href=&#34;https://www.instagram.com/ilonacodes/&#34;&gt;Instagram profile&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Let&#39;s complete some tasks with React&#43;Redux</title>
      <link>https://ilonacodes.github.io/blog/complete-some-tasks-with-react-redux/</link>
      <pubDate>Tue, 26 Sep 2017 19:30:05 +0100</pubDate>
      
      <guid>https://ilonacodes.github.io/blog/complete-some-tasks-with-react-redux/</guid>
      <description>&lt;p&gt;Today we are going to implement the second feature for our app. If you are a new reader, then I highly recommend you to check my earlier blog posts &lt;a href=&#34;http://www.ilonacodes.com/blog/react-for-very-very-beginners/&#34;&gt;here&lt;/a&gt;, where we started our learning journey in React+Redux, refer to the posts complete previous steps and continue with us to develop an interactive ToDo List from here.&lt;/p&gt;

&lt;p&gt;As you guess from the blog title, the next feature called &lt;code&gt;Complete a task&lt;/code&gt;.  So, let&amp;rsquo;s begin! At first, we start writing the next user story, and it will look like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;As Bob
I want to complete the task
So that I can keep track of what is completed and what is not

## Acceptance Criteria:

Given a task list
And every task is listed
And I am on a dashboard screen
When I complete a task from the list
And click on this chosen task
Then I see the task is crossed out

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you got the idea how it should work. Let&amp;rsquo;s start to implement the new feature and come back to our project &lt;code&gt;my-daily-todos&lt;/code&gt; directory changing into &lt;code&gt;Task.js&lt;/code&gt; component, where we will add a new action &lt;code&gt;completeTask&lt;/code&gt; to the &lt;code&gt;onClick&lt;/code&gt;function:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;
// my-daily-todos/src/Tasks/Task.js

import React from &#39;react&#39;;

export const Task = ({task, completeTask}) =&amp;gt; {
  return &amp;lt;div onClick={e =&amp;gt; completeTask(task.id)}&amp;gt;
    {task.title}
  &amp;lt;/div&amp;gt;
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Afterwards, we have to dispatch the action to the store with states, that&amp;rsquo;s why now we are changing into &lt;code&gt;TaskList.js&lt;/code&gt; and add the action &lt;code&gt;completeTask&lt;/code&gt; to &lt;code&gt;mapDispatchToProps&lt;/code&gt; passing to &lt;code&gt;Task.js&lt;/code&gt; component inside the &lt;code&gt;TaskListComponent&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;
// my-daily-todos/src/Tasks/TaskList.js

import React, { Component } from &#39;react&#39;;
import { connect } from &#39;react-redux&#39;;

import { Task } from &#39;./Task.js&#39;;
import { actions } from &#39;./actions&#39;;

const TaskListComponent = ({tasks, completeTask}) =&amp;gt; {
  return &amp;lt;div className=&amp;quot;tasklist-container&amp;quot;&amp;gt;
    &amp;lt;ul&amp;gt;
      {tasks.map(task =&amp;gt;
        &amp;lt;li key={task.id}&amp;gt;

          // pass the &amp;quot;completeTask&amp;quot; action to &amp;quot;Task&amp;quot; component
          &amp;lt;Task task={task} completeTask={completeTask} /&amp;gt;
        &amp;lt;/li&amp;gt;
      )}
    &amp;lt;/ul&amp;gt;
  &amp;lt;/div&amp;gt;
}

const mapStateToProps = (state) =&amp;gt; {
  return {
    tasks: state.tasks
  }
}

const mapDispatchToProps = (dispatch) =&amp;gt; {
  return {

    // dispatch the &amp;quot;completeTask&amp;quot; function with &amp;quot;id&amp;quot; parameter as an action to store of states
    completeTask: (id) =&amp;gt; dispatch(actions.completeTask(id))
  }
}

export const TaskList = connect(
  mapStateToProps,
  mapDispatchToProps
)(TaskListComponent);

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you will take a look at the &lt;code&gt;actions.js&lt;/code&gt; file, then you will have noticed that we still don&amp;rsquo;t have the &lt;code&gt;completeTask&lt;/code&gt; action. Let&amp;rsquo;s create one into the &lt;code&gt;actions.js&lt;/code&gt; file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;
// my-daily-todos/src/Tasks/actions.js

export const t = {
  ADD_TASK: &#39;ADD_TASK&#39;,
  COMPLETE_TASK: &#39;COMPLETE_TASK&#39;
}

export const actions = {
  addTask: title =&amp;gt; ({
    type: t.ADD_TASK,
    title
  }),

// create a new action function &amp;quot;completeTask&amp;quot; passing &amp;quot;id&amp;quot; as a parameter
  completeTask: id =&amp;gt; ({
    type: t.COMPLETE_TASK,
    id
  }),
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Good job! The next step is to pass the action created above to our &lt;code&gt;tasksReducer&lt;/code&gt;. Switch to &lt;code&gt;reducers.js&lt;/code&gt; file and add a new case &lt;code&gt;t.COMPLETE_TASK&lt;/code&gt; to the reducer:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;
// my-daily-todos/src/Tasks/reducers.js

import { t } from &#39;./actions&#39;;

const initState = []

function generateID () {
  return &#39;_&#39; + Math.random().toString(36).substr(2,9);
}

export const tasksReducer = (state = initState, action) =&amp;gt; {

  switch (action.type) {
    case t.ADD_TASK:
      return [
        ...state,
        {
          id: generateID(),
          title: action.title
        }
      ]

// add the new case that returns the task list
    case t.COMPLETE_TASK:
      return state.map(task =&amp;gt; {
// if the task is the one that is clicked by the user
        if (task.id === action.id) {
// then assign to a new property &amp;quot;completed&amp;quot; the &amp;quot;true&amp;quot; value
          return { ...task, completed: true }
        } else {
// otherwise, return the task object
          return task
        }
      })

    default:
      return state;
  }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You are right! From now there are already three properties (id, title and completed) that belong to the &lt;code&gt;task&lt;/code&gt; object. To use the completed property, we are going to &lt;code&gt;Task.js&lt;/code&gt; component and write the &lt;code&gt;if-statement&lt;/code&gt;: if &lt;code&gt;task.completed&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; then we assign the &lt;code&gt;.completed&lt;/code&gt; class name style to this task:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;
// my-daily-todos/src/Tasks/Task.js

import React from &#39;react&#39;;

export const Task = ({task, completeTask}) =&amp;gt; {

// add the &amp;quot;if-statement&amp;quot;
  return &amp;lt;div className={`${task.completed ? &#39;completed&#39; : &#39;&#39;}`} onClick={e =&amp;gt; completeTask(task.id)}&amp;gt;
    {task.title}
  &amp;lt;/div&amp;gt;
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Lastly, we have to add &lt;code&gt;line-through&lt;/code&gt; style to &lt;code&gt;.completed&lt;/code&gt; class into &lt;code&gt;App.css&lt;/code&gt;, because we want to mark the completed task by crossing out that:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;// my-daily-todos/src/App.css

...
.tasklist-container ul li .completed{
  text-decoration: line-through;
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The results of creating tasks and completing tasks are shown below:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://ilonacodes.github.io/blog/images/add-tasks.png&#34; alt=&#34;Add tasks:&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://ilonacodes.github.io/blog/images/complete-tasks.png&#34; alt=&#34;Complete tasks:&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Congratulations! You finished the second feature for our app. To watch how it works in the browser, just run the localhost server by typing &lt;code&gt;npm start&lt;/code&gt; in your terminal inside the &lt;code&gt;my-daily-todos&lt;/code&gt; folder.&lt;/p&gt;

&lt;p&gt;Thank you for the reading. I hope you find useful the React+Redux tutorial series!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The First User Story, The First Feature With React&#43;Redux</title>
      <link>https://ilonacodes.github.io/blog/the-first-user-story-the-first-feature/</link>
      <pubDate>Thu, 21 Sep 2017 19:30:05 +0100</pubDate>
      
      <guid>https://ilonacodes.github.io/blog/the-first-user-story-the-first-feature/</guid>
      <description>&lt;p&gt;Hi, everyone! I guess you are pretty encouraged to start coding our app. Just to remind: it will be an interactive daily ToDo List. Today I am going to explain: what is a user story? Why do we need to write it before implementing a feature? How will we organize and structure an app? What is, actually, a new feature?&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s start with the first question. In my opinion, user stories are efficient things. To be more precise, we begin to write them from the perspective of the user and describe them in a very simple way with traditional structure. How it works:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;As a (name of the user)
I want to (some actions or feature)
so that/because (reason and value for the user)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It&amp;rsquo;s possible to add some acceptance criteria to user stories that will indicate what should happen, driven by context and other situations.
In our case, the user story for the first feature will look like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;As Bob
I want to add a new task.
So that I remember what I should do today

## Acceptance Criteria:

Given there are no tasks
And I (Bob) am on the dashboard screen
When I input a new task title
And press enter
Then I see the task on the dashboard screen
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I guess, now you got an idea what the kind of functionality contains the first feature. I recommend writing user stories to understand clearly what the result we want to get and how it should work in the end.&lt;/p&gt;

&lt;p&gt;Coming back to our app, I want you to change into the directory &lt;code&gt;my-daily-todos&lt;/code&gt; and there remove the whole code from the &lt;code&gt;index.js&lt;/code&gt;, because now we are going to structure an app:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Create a new folder &lt;code&gt;Tasks&lt;/code&gt; into &lt;code&gt;src&lt;/code&gt;.
There we will store all our files for the task feature.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Add new files &lt;code&gt;actions.js&lt;/code&gt;, &lt;code&gt;reducers.js&lt;/code&gt;, &lt;code&gt;NewTask.js&lt;/code&gt;, &lt;code&gt;Task.js&lt;/code&gt;, &lt;code&gt;TaskList.js&lt;/code&gt; into &lt;code&gt;Tasks&lt;/code&gt; folder.
As you know, &lt;code&gt;actions.js&lt;/code&gt; and &lt;code&gt;reducers.js&lt;/code&gt; we need for handling states, state changes, and actions. &lt;code&gt;NewTask.js&lt;/code&gt; will contain the component with the input form for a new task and will belong to the navigation bar. &lt;code&gt;Task.js&lt;/code&gt; is a component that presents the &lt;code&gt;task&lt;/code&gt; object with &lt;code&gt;id&lt;/code&gt; and &lt;code&gt;title&lt;/code&gt; properties. &lt;code&gt;TaskList&lt;/code&gt; is a component that presents all the tasks we have created and will appear as the rest of the &amp;ldquo;body&amp;rdquo; of the page.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;span style=&#34;color:red&#34;&gt;Notice! We still use &lt;code&gt;index.js&lt;/code&gt; to render the whole app &lt;code&gt;App.js&lt;/code&gt; in the browser; &lt;code&gt;App.js&lt;/code&gt; to connect &lt;code&gt;NewTask.js&lt;/code&gt; and &lt;code&gt;TaskList.js&lt;/code&gt;, and &lt;code&gt;App.css&lt;/code&gt; to make a basic design for our app.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;3&amp;hellip;2&amp;hellip;1&amp;hellip; And now. Finally, let&amp;rsquo;s start coding!
To refer to the app structure, I advise you to start developing with the components and then add redux functionalities and properties such as actions and reducers with states. As I mentioned above, at the beginning I write the &lt;code&gt;NewTask.js&lt;/code&gt; component, so switch to there and begin your coding journey. I added some comment to make it easy to understand the basic principle how it works. Now you see what we have here:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// my-daily-todos/src/Tasks/NewTask.js

import React, { Component } from &#39;react&#39;;
import { connect } from &#39;react-redux&#39;;

import { actions } from &#39;./actions&#39;;

// here we create a component that will connect to NewTask component

const NewTaskComponent = ({addTask}) =&amp;gt; {

// this function is in charge of handling Enter key on a new task submit

function handleKeyPress (e) {
  if (e.key === &#39;Enter&#39;) {
    addTask(e.target.value);
    e.target.value = &#39;&#39;;      // make an input field empty after pressing Enter
    e.preventDefault();
  }
}

// what UI component contains
  return &amp;lt;div&amp;gt;
    &amp;lt;input
      type=&#39;text&#39;
      placeholder=&#39;Add a new task...&#39;
      onKeyPress={handleKeyPress}
    /&amp;gt;
  &amp;lt;/div&amp;gt;
}

const mapStateToProps = (state) =&amp;gt; {
  return {

  }
}

// which actions dispatch to reducer
const mapDispatchToProps = (dispatch) =&amp;gt; {
  return {
    addTask: (title) =&amp;gt; dispatch(actions.addTask(title))
  }
}

// export the NewTaks component to App.js
export const NewTask = connect(
  mapStateToProps,
  mapDispatchToProps
)(NewTaskComponent);

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The next &lt;code&gt;Task.js&lt;/code&gt; component renders the &lt;code&gt;task&lt;/code&gt; object in the browser:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// my-daily-todos/src/Tasks/Task.js

import React from &#39;react&#39;;

// the argument is a task object that return the title task
export const Task = ({task}) =&amp;gt; {
  return &amp;lt;div&amp;gt;
    {task.title}
  &amp;lt;/div&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We also need a component &lt;code&gt;TaskList.js&lt;/code&gt; that will render all tasks that we have added/created through the input:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// my-daily-todos/src/Tasks/TaskList.js

import React, { Component } from &#39;react&#39;;
import { connect } from &#39;react-redux&#39;;

// import Task component
import { Task } from &#39;./Task.js&#39;;

const TaskListComponent = ({tasks}) =&amp;gt; {
  return &amp;lt;div&amp;gt;
    &amp;lt;ul&amp;gt;
 // create a dynamic task list with javascript inside html and pass properties to the Task component
      {tasks.map(task =&amp;gt;
        // key={.. something unique ..} is important when rendering lists in react
        &amp;lt;li key={task.id}&amp;gt;
          &amp;lt;Task task={task} /&amp;gt;
        &amp;lt;/li&amp;gt;
      )}
    &amp;lt;/ul&amp;gt;
  &amp;lt;/div&amp;gt;
}

// collect the tasks state that would be passing to the store of states
const mapStateToProps = (state) =&amp;gt; {
  return {
    tasks: state.tasks
  }
}

const mapDispatchToProps = (dispatch) =&amp;gt; {
  return {

  }
}

// export the TaskList component to App.js
export const TaskList = connect(
  mapStateToProps,
  mapDispatchToProps
)(TaskListComponent);

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We still should make a couple of steps to make our app work. Also, the next step is to write action &lt;code&gt;addTask&lt;/code&gt; to &lt;code&gt;actions.js&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// my-daily-todos/src/Tasks/actions.js

// create t const to define a list actions
export const t = {
  ADD_TASK: &#39;ADD_TASK&#39;
}

// export actions with addTask action creator passing title as argument to component NewTask.js and reducers

export const actions = {
  addTask: title =&amp;gt; ({
    type: t.ADD_TASK,
    title
  })
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Good job! As you noticed, we still don&amp;rsquo;t have any reducer. That&amp;rsquo;s why we open &lt;code&gt;reducers.js&lt;/code&gt; file and write a reducer:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// my-daily-todos/src/Tasks/reducers.js

import { t } from &#39;./actions&#39;;

// create initial state. In our case, it is an empty list of tasks
const initState = []

// create a function that generates ID for every task randomly
function generateID () {
  return &#39;_&#39; + Math.random().toString(36).substr(2,9);
}

// create tasksReducer with state as initState and action as arguments

export const tasksReducer = (state = initState, action) =&amp;gt; {

  switch (action.type) {

// the ADD_TASK action has to return all previous state and a new task with generated ID and typed title

    case t.ADD_TASK:
      return [
        ...state,
        {
          id: generateID(),
          title: action.title
        }
      ]

// otherwise, return just previous state that is initState
    default:
      return state;
  }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To store and to change states, it&amp;rsquo;s necessary to have a store with reducers and provide that states to render in the browser. All of that we should apply into &lt;code&gt;index.js&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// my-daily-todos/src/index.js

import React from &#39;react&#39;;
import ReactDOM from &#39;react-dom&#39;;
import { createStore, combineReducers } from &#39;redux&#39;;
import { Provider } from &#39;react-redux&#39;;

// all custom imports
import &#39;./index.css&#39;;
import { App } from &#39;./App.js&#39;;
import { tasksReducer } from &#39;./Tasks/reducers.js&#39;;

// create store using createStore() including combineReducers() to pass the taskReducer with name &amp;quot;tasks&amp;quot;

let store = createStore(
  combineReducers({
    tasks: tasksReducer
  }),
);

ReactDOM.render(
// apply store to store states and make them available to dispatch in components

  &amp;lt;Provider store={store}&amp;gt;
    &amp;lt;App /&amp;gt;
  &amp;lt;/Provider&amp;gt;,
  document.getElementById(&#39;root&#39;)
);

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, we can connect all above components (apart from &lt;code&gt;Task.js&lt;/code&gt; that is already used inside of &lt;code&gt;TaskList.js&lt;/code&gt; component) in one component - &lt;code&gt;App.js&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// my-daily-todos/src/App.js

import React, { Component } from &#39;react&#39;;

import &#39;./App.css&#39;;
// import both components
import { NewTask } from &#39;./Tasks/NewTask.js&#39;;
import { TaskList } from &#39;./Tasks/TaskList.js&#39;;

export const App = () =&amp;gt; {
// pass both components to App.js
  return &amp;lt;div&amp;gt;
    &amp;lt;NewTask /&amp;gt;
    &amp;lt;TaskList /&amp;gt;
  &amp;lt;/div&amp;gt;
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s it. Just change into &lt;code&gt;my-daily-todos&lt;/code&gt; directory and run your local server using &lt;code&gt;npm start&lt;/code&gt; command in the terminal.&lt;/p&gt;

&lt;p&gt;If you want, to make your app fancy, then you can apply some CSS styles to classes that I assign in tags below. Just come back to &lt;code&gt;App.js&lt;/code&gt; component:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// my-daily-todos/src/App.js

import React, { Component } from &#39;react&#39;;
import { connect } from &#39;react-redux&#39;;

// we have already imported App.css to make things look good
import &#39;./App.css&#39;;
import { NewTask } from &#39;./Tasks/NewTask.js&#39;
import { TasksList } from &#39;./Tasks/TasksList&#39;;

export const App = () =&amp;gt; {
// add one more div tag and assign the classes
  return &amp;lt;div className=&#39;container&#39;&amp;gt;
      &amp;lt;div className=&#39;navbar&#39;&amp;gt;
        &amp;lt;div className=&#39;logo&#39;&amp;gt;
          &amp;lt;h1&amp;gt;ToDoDaily&amp;lt;/h1&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;NewTask /&amp;gt;
      &amp;lt;/div&amp;gt;
      &amp;lt;TasksList /&amp;gt;
    &amp;lt;/div&amp;gt;
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The same thing we are doing for the &lt;code&gt;TaskList.js&lt;/code&gt; component. Just adding the &lt;code&gt;tasklist-container&lt;/code&gt; class to the div tag after return:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;my-daily-todos/src/Tasks/TaskList.js
...
export const TasksListComponent = ({tasks, completeTask}) =&amp;gt; {
  return &amp;lt;div className=&amp;quot;taskslist-container&amp;quot;&amp;gt;
    &amp;lt;ul&amp;gt;
    {tasks.map(task =&amp;gt;
      &amp;lt;li&amp;gt;
...

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;span style=&#34;color:red&#34;&gt;If you take a look at &lt;code&gt;index.js&lt;/code&gt;, you will notice, that &lt;code&gt;App.js&lt;/code&gt; is already imported.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;All that remains is to design our app. As you noticed, we have already Logo, which with input field belongs to the navigation bar according to the idea how the app will look at the end. Now we are going to App.css and style our app with simple CSS rules:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;/* my-daily-todos/src/App.css */

.container {
  padding: 0;
  margin: 0;
}

.navbar {
  background-color: #333;
  overflow: hidden;
  display: block;
  width: 100%;
  height: 80px;
}

.logo {
  float: left;
  color: white;
  margin-left: 2rem;
}

input {
  float: none;
  color: black;
  padding: 5px 25px;
  margin: 1.8rem;
  border-radius: 3px;
  border-width: 1px;
}

.taskslist-container {
  margin-top: 1rem;
  margin-left: 1rem;
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we have completed the first feature for our app and can move forward to increase the functionality of the app by adding new features using React+Redux and their dependencies.&lt;/p&gt;

&lt;p&gt;If you still have any questions how it works or why something doesn&amp;rsquo;t work for you, don&amp;rsquo;t hesitate and find me via my &lt;a href=&#34;mailto:demiluri@gmail.com&#34;&gt;email&lt;/a&gt; or on my &lt;a href=&#34;https://www.instagram.com/ilonacodes/&#34;&gt;Instagram profile&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thank you for your reading and wish you the best luck by learning React+Redux frameworks!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Simple Usage of React&#43;Redux</title>
      <link>https://ilonacodes.github.io/blog/simple-usage-of-react-redux/</link>
      <pubDate>Sun, 17 Sep 2017 20:00:05 +0100</pubDate>
      
      <guid>https://ilonacodes.github.io/blog/simple-usage-of-react-redux/</guid>
      <description>&lt;p&gt;As I promised in &lt;a href=&#34;http://www.ilonacodes.com/blog/react-for-very-very-beginners/&#34;&gt;my previous post&lt;/a&gt;, today I am going to tell you about Redux, why and how we need to use them in common.
Let me introduce React+Redux co-working through the simple input change that should render &lt;code&gt;Hello, {any name / text}!&lt;/code&gt; at the end and manage by redux states.&lt;/p&gt;

&lt;p&gt;Redux? What is it?
Redux is a predictable state container for managing both UI-state and data-state in JavaScript applications. It helps you create applications that behave consistently and run in different environments like client, server, and native. To add Redux dependencies to your application type and run in a command line:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install --save redux
npm install --save react-redux
npm install --save-dev redux-devtools
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can read more about that &lt;a href=&#34;http://redux.js.org/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s come back to the &lt;code&gt;my-daily-todos&lt;/code&gt; directory in the &lt;code&gt;workspace&lt;/code&gt; that we set up in my previous post and change into &lt;code&gt;my-daily-todos/src/index.js&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color:red&#34;&gt;It&amp;rsquo;s not a good style to write all code parts in one file, and I do that only for this example.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;I recommend you to remove all code inside and just replace that with:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import React from &#39;react&#39;;
import ReactDOM from &#39;react-dom&#39;;
import &#39;./index.css&#39;;

const Hello = () =&amp;gt; {
  return &amp;lt;div&amp;gt;
    &amp;lt;input type=&#39;text&#39; /&amp;gt;
    &amp;lt;p&amp;gt;Hello, World!&amp;lt;/p&amp;gt;
  &amp;lt;/div&amp;gt;
}

ReactDOM.render(&amp;lt;Hello /&amp;gt;,
  document.getElementById(&#39;root&#39;)
);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you noticed, now we are going to render the &lt;code&gt;Hello&lt;/code&gt; component in the browser.&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color:red&#34;&gt;Don&amp;rsquo;t forget run local server on your computer from the &lt;code&gt;my-daily-todos&lt;/code&gt; directory using &lt;code&gt;npm start&lt;/code&gt; in the command line.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;What you should see in the browser is an input field and the simple message &lt;code&gt;Hello, World!&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now I am going to add some props to our code, which could make you confused, but don&amp;rsquo;t worry I will explain that below:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import React from &#39;react&#39;;
import ReactDOM from &#39;react-dom&#39;;
import { connect, Provider } from &#39;react-redux&#39;;

import &#39;./index.css&#39;;

const HelloComponent = ({name, updateName}) =&amp;gt; {
  return &amp;lt;div&amp;gt;
    &amp;lt;input type=&#39;text&#39;
           value={name}
           onChange={e =&amp;gt; updateName(e.target.value)}
    /&amp;gt;
    &amp;lt;p&amp;gt;Hello, World!&amp;lt;/p&amp;gt;
  &amp;lt;/div&amp;gt;
}

const mapStateToProps = (state) =&amp;gt; {
  return {

  }
}

const mapDispatchToProps = (dispatch) =&amp;gt; {
  return {

  }
}

const Hello = connect(
  mapStateToProps,
  mapDispatchToProps
)(HelloComponent);

ReactDOM.render(
  &amp;lt;Provider&amp;gt;
    &amp;lt;Hello /&amp;gt;
  &amp;lt;/Provider&amp;gt;,
  document.getElementById(&#39;root&#39;)
);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Yeah, it doesn&amp;rsquo;t render anymore, does it? ;) First of all, you see some values inside the &lt;code&gt;Hello&lt;/code&gt; component and don&amp;rsquo;t have any idea from where they come. Secondly, you noticed three new constants &lt;code&gt;mapStateToProps&lt;/code&gt;,  &lt;code&gt;mapDispatchToProps&lt;/code&gt; and &lt;code&gt;Hello&lt;/code&gt;. As you guess, the last one connects two previous via &lt;code&gt;HelloComponent&lt;/code&gt; connector and all these elements with all props should be rendering in &amp;ldquo;Hello&amp;rdquo; component via &lt;code&gt;Provider&lt;/code&gt; component. That is where Redux comes in: &lt;code&gt;mapStateToProps&lt;/code&gt; allows to read any application state, and &lt;code&gt;mapDispatchToProps&lt;/code&gt; allows to dispatch state changes.
Right now, the logical question: &amp;ldquo;Where should it manage state and dispatch actions?&amp;rdquo;&lt;/p&gt;

&lt;p&gt;The answer is into the store:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import { connect, Provider } from &#39;react-redux&#39;;
import { createStore, combineReducers } from &#39;redux&#39;;

// ...

const Hello = connect(
  mapStateToProps,
  mapDispatchToProps
)(HelloComponent);

let store = createStore(
  combineReducers({}),
);

ReactDOM.render(
  &amp;lt;Provider store={store}&amp;gt;
    &amp;lt;Hello /&amp;gt;
  &amp;lt;/Provider&amp;gt;,
  document.getElementById(&#39;root&#39;)
);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We created a store variable using &lt;code&gt;createStore&lt;/code&gt; function to create a store and combineReducers function to add reducers (we will speak about that a bit later).&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color:red&#34;&gt;Notice! All components and functions that belong to React and Redux must be imported at the beginning of the file.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Finally, it renders correctly in the browser, and still, nothing changed. As I mentioned above, we need to add a reducer, but I would like to start from the action creating:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// ...

const Hello = connect(
  mapStateToProps,
  mapDispatchToProps
)(HelloComponent);

/* Action */
// create action type
const UPDATE_NAME = &#39;UPDATE_NAME&#39;

// action creators
function updateName(name) {
  return { type: UPDATE_NAME, name }
}

// ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We are using the action to send data from the application to the store via dispatch function that notifies store about the current state that the store gets from the reducer:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;/* Reducer */

//create an initial state with empty name as a value
const initState = { name: &#39;&#39; }

// create a reducer
const greetingReducer = (state = initState, action) =&amp;gt; {
  switch (action.type) {
    case UPDATE_NAME:
      return Object.assign({}, state, {
        name: action.name
      })

    default:
      return state;
  }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;These are action cases that are responsible for the defined behavior for the dispatched action. In our case, our goal is to update the name by input = change the input value and see results on the screen in the browser. After creating the reducer, we have to combine it via &lt;code&gt;combineReducers&lt;/code&gt; in the store and give it a name to use:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// ...

let store = createStore(
  combineReducers({
    greeting: greetingReducer
  }),
);

//...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, we are ready to provide all states and all actions (for this feature we have only one state and one action) adding them to
&lt;code&gt;mapStateToProps&lt;/code&gt; and &lt;code&gt;mapDispatchToProps&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const mapStateToProps = (state) =&amp;gt; {
  return {
    name: state.greeting.name
  }
}

const mapDispatchToProps = (dispatch) =&amp;gt; {
  return {
    updateName: (name) =&amp;gt; dispatch(updateName(name))
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And all these props are already used in &lt;code&gt;HelloComponent&lt;/code&gt;. Just check this component and find them.&lt;/p&gt;

&lt;p&gt;The last step is to make things work properly and see the results on the screen in the browser. So, we have to add &lt;code&gt;{name}&lt;/code&gt; property instead of the &amp;ldquo;World&amp;rdquo; inside the &amp;ldquo;Hello, World!&amp;rdquo;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const HelloComponent = ({name, updateName}) =&amp;gt; {
  return &amp;lt;div&amp;gt;
    &amp;lt;input type=&#39;text&#39;
           value={name}
           onChange={e =&amp;gt; updateName(e.target.value)}
    /&amp;gt;
    &amp;lt;p&amp;gt;Hello, {name}!&amp;lt;/p&amp;gt;
  &amp;lt;/div&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s it. It should work. If you have any questions, you can reach me through the &lt;a href=&#34;mailto:demiluri@gmail.com&#34;&gt;email&lt;/a&gt; or in direct messages on &lt;a href=&#34;https://www.instagram.com/ilonacodes/&#34;&gt;Instagram&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The whole code is below:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import React from &#39;react&#39;;
import ReactDOM from &#39;react-dom&#39;;
import { connect, Provider } from &#39;react-redux&#39;;
import { createStore, combineReducers } from &#39;redux&#39;;

import &#39;./index.css&#39;;

/* Component */
const HelloComponent = ({name, updateName}) =&amp;gt; {
  return &amp;lt;div&amp;gt;
    &amp;lt;input type=&#39;text&#39;
           value={name}
           onChange={e =&amp;gt; updateName(e.target.value)}
    /&amp;gt;
    &amp;lt;p&amp;gt;Hello, {name}!&amp;lt;/p&amp;gt;
  &amp;lt;/div&amp;gt;
}

const mapStateToProps = (state) =&amp;gt; {
  return {
    name: state.greeting.name
  }
}

const mapDispatchToProps = (dispatch) =&amp;gt; {
  return {
    updateName: (name) =&amp;gt; dispatch(updateName(name))
  }
}

const Hello = connect(
  mapStateToProps,
  mapDispatchToProps
)(HelloComponent);

/* Action */
const UPDATE_NAME = &#39;UPDATE_NAME&#39;

function updateName(name) {
  return { type: UPDATE_NAME, name }
}

/* Reducer */
const initState = { name: &#39;&#39; }

const greetingReducer = (state = initState, action) =&amp;gt; {
  switch (action.type) {
    case UPDATE_NAME:
      return Object.assign({}, state, {
        name: action.name
      })

    default:
      return state;
  }
}

/* store */
let store = createStore(
  combineReducers({
    greeting: greetingReducer
  }),
);

/* Provider using store */
ReactDOM.render(
  &amp;lt;Provider store={store}&amp;gt;
    &amp;lt;Hello /&amp;gt;
  &amp;lt;/Provider&amp;gt;,
  document.getElementById(&#39;root&#39;)
);

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the next post, we will start writing an interactive TODO list with user stories step by step using React+Redux technologies stack.&lt;/p&gt;

&lt;p&gt;Thank you for reading! Happily, you got the basic idea of React+Redux &amp;ldquo;co-working&amp;rdquo; and became ready to start your journey within.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>React For Very Very Beginners</title>
      <link>https://ilonacodes.github.io/blog/react-for-very-very-beginners/</link>
      <pubDate>Fri, 15 Sep 2017 16:25:05 +0100</pubDate>
      
      <guid>https://ilonacodes.github.io/blog/react-for-very-very-beginners/</guid>
      <description>&lt;p&gt;The biggest challenge for beginners not only in front end development but also in the whole web development world is to find the answer to the question: How / Where should I start to learn web development? Some of these questions I have already received via private messages on social networks, and that encouraged me to create a series of small posts to write and complete the first app using JS (ECMA6) with React-Redux frameworks on which technologies I specialize.&lt;/p&gt;

&lt;p&gt;Our goal for the first application is to write an interactive daily TODO list application. In particular, by finishing this series, you should be able to understand the basic concepts, structures and &amp;ldquo;communication&amp;rdquo; between React-Redux in use.&lt;/p&gt;

&lt;p&gt;No more talking and let&amp;rsquo;s start. I am sure my readers are pretty curious about how to manage and control operation flow on the computer and already familiar with some Unix commands to manage their stuff in command line. However, I am going to write down some of them that we will use. First, we should make a workspace directory for the app and then change into this directory.&lt;/p&gt;

&lt;p&gt;Type in the command line:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd
mkdir workspace
cd workspace
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And voilà! We are already inside the directory for our app!&lt;/p&gt;

&lt;p&gt;The next step is to install npm. It is a package manager for Node.js that creates some of your directory structure/organization. Also, helps with installing various packages and resolving their dependencies.&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color:red&#34;&gt; If you didn&amp;rsquo;t use Node.js before, you should install it. Just visit this link &lt;a href=&#34;https://nodejs.org/en/download/&#34;&gt;https://nodejs.org/en/download/&lt;/a&gt; and install it. &lt;/span&gt;&lt;/p&gt;

&lt;p&gt;It will be enough for our app to type this command in the Unix command line:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install npm@latest -g
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Don&amp;rsquo;t forget to check the version of npm (double-check if it has been installed correctly) running this command in your terminal:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm -v
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, we are ready to create our first React-App! Notice that we are still in the workspace directory and continue typing in the terminal the commands below:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install -g create-react-app
create-react-app my-daily-todos
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Yeah, here we are getting started with React. The first line allows us to install the global package and the second one to use it to create a new React App with the name &amp;ldquo;my-daily-todos&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Congratulations! You have installed your first React-App. And to see the results, how it looks like, we have to launch the development server:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm start
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And the browser will automatically open URL of the created React application on the random localhost address.
Sure, you are encouraged to learn more about the React structure.&lt;/p&gt;

&lt;p&gt;So now we are moving to the next step: open our app and take a look at the code in your favorite text/code editor.
Don&amp;rsquo;t forget that the local server is still working and we could check our changes in the code by refreshing the page with the localhost address. Now I am going to render &amp;ldquo;Oh, hi there!&amp;rdquo; message. In our case, we have to open App.js (my-daily-todos/src/App.js). What should you see on the screen:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import React, { Component } from &#39;react&#39;;
import logo from &#39;./logo.svg&#39;;
import &#39;./App.css&#39;;

class App extends Component {
  render() {
    return (
      &amp;lt;div className=&amp;quot;App&amp;quot;&amp;gt;
        &amp;lt;div className=&amp;quot;App-header&amp;quot;&amp;gt;
          &amp;lt;img src={logo} className=&amp;quot;App-logo&amp;quot; alt=&amp;quot;logo&amp;quot; /&amp;gt;
          &amp;lt;h2&amp;gt;Welcome to React&amp;lt;/h2&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;p className=&amp;quot;App-intro&amp;quot;&amp;gt;
          To get started, edit &amp;lt;code&amp;gt;src/App.js&amp;lt;/code&amp;gt; and save to reload.
        &amp;lt;/p&amp;gt;
      &amp;lt;/div&amp;gt;
    );
  }
}

export default App;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And then just to add a new paragraph-tag with the text: &amp;ldquo;Oh, hi there!&amp;rdquo; inside the &lt;code&gt;className&lt;/code&gt; &amp;ldquo;App&amp;rdquo;, after the &lt;code&gt;className&lt;/code&gt; &amp;ldquo;App-intro&amp;rdquo;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import React, { Component } from &#39;react&#39;;
import logo from &#39;./logo.svg&#39;;
import &#39;./App.css&#39;;

class App extends Component {
  render() {
    return (
      &amp;lt;div className=&amp;quot;App&amp;quot;&amp;gt;
        &amp;lt;div className=&amp;quot;App-header&amp;quot;&amp;gt;
          &amp;lt;img src={logo} className=&amp;quot;App-logo&amp;quot; alt=&amp;quot;logo&amp;quot; /&amp;gt;
          &amp;lt;h2&amp;gt;Welcome to React&amp;lt;/h2&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;p className=&amp;quot;App-intro&amp;quot;&amp;gt;
          To get started, edit &amp;lt;code&amp;gt;src/App.js&amp;lt;/code&amp;gt; and save to reload.
        &amp;lt;/p&amp;gt;

        &amp;lt;p&amp;gt;
          Oh, hi there!
        &amp;lt;/p&amp;gt;

      &amp;lt;/div&amp;gt;
    );
  }
}

export default App;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After refreshing the localhost page, you should see the added text below the previous content.&lt;/p&gt;

&lt;p&gt;Hopefully,  you enjoyed my explanation how to start with React and would like to know more about the launching Redux, why we need it and look closer to all our dependencies in one file.&lt;/p&gt;

&lt;p&gt;Thank you for reading and your kind interest in my post!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Starting with REST API: Figuring out</title>
      <link>https://ilonacodes.github.io/blog/starting-with-REST-API/</link>
      <pubDate>Mon, 17 Jul 2017 21:45:05 +0100</pubDate>
      
      <guid>https://ilonacodes.github.io/blog/starting-with-REST-API/</guid>
      <description>&lt;p&gt;Today I started doing backend part for my project. It will be written in Ruby language and using Sinatra framework.&lt;/p&gt;

&lt;p&gt;This post is directed at readers that have little experiences to understand the aim of REST API for a product development.&lt;/p&gt;

&lt;p&gt;Coming back to my project, I had to implement search and preview functionalities. I used a .txt file to describe the REST API precisely and go through it step by step.&lt;/p&gt;

&lt;p&gt;As you know, the client talks to the server via the REST API. In my case, the client is a React/Redux app running in the browser.&lt;/p&gt;

&lt;p&gt;After analyzing spec features for the application, I understood which methods I need to use when the user clicks the search button and when the user clicks on the search result to preview this photo.&lt;/p&gt;

&lt;p&gt;Probably, some of you have already guessed that in both occasions I am going to use GET method for both endpoints. That is because they only are used to request the information from the server, and they don&amp;rsquo;t change the state of the system.&lt;/p&gt;

&lt;p&gt;I am still not using the database for storing photos data, so I have to fetch the data from the file system.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;client (browser or test )
user clicks search
       |
       |
       |
       v
server (sinatra)
GET /search?query=girl
--&amp;gt; 200 OK {
    &amp;quot;search_results&amp;quot;: [
        {
            src: &amp;quot;http://localhost:8080/static/girl1.png&amp;quot;,
            name: &amp;quot;girl&amp;quot;,
            id: 1,
            tags: [&amp;quot;girl&amp;quot;, &amp;quot;woman&amp;quot;, &amp;quot;blue&amp;quot;, &amp;quot;hat&amp;quot;, &amp;quot;nature&amp;quot;, &amp;quot;smoke&amp;quot;, &amp;quot;trees&amp;quot;, &amp;quot;hand&amp;quot;, &amp;quot;art&amp;quot;]
        },
        {
            src: &amp;quot;http://localhost:8080/static/girl2.png&amp;quot;,
            name: &amp;quot;meditation&amp;quot;,
            id: 5,
            tags: [&amp;quot;boy&amp;quot;, &amp;quot;meditation&amp;quot;, &amp;quot;ancient&amp;quot;, &amp;quot;girl&amp;quot;]
        }
    ]
}

---

client (browser)
user clicks on the search result (photo) to see the photo preview
       |
       |
       |
       v
server (sinatra)
GET /preview/4
--&amp;gt; 200 OK {
    src: &amp;quot;http://localhost:8080/static/skyscraper.png&amp;quot;,
    name: &amp;quot;skyscraper&amp;quot;,
    id: 4,
    tags: [&amp;quot;skyscraper&amp;quot;, &amp;quot;city&amp;quot;, &amp;quot;build&amp;quot;]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I hope, my plot is readable enough and understandable, so you can get an idea how I am going to implement the request-response interaction between the client application and the server.&lt;/p&gt;

&lt;p&gt;Thank you for reading!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>CSS Sticky Footer</title>
      <link>https://ilonacodes.github.io/blog/css-sticky-footer/</link>
      <pubDate>Sat, 08 Jul 2017 20:25:05 +0100</pubDate>
      
      <guid>https://ilonacodes.github.io/blog/css-sticky-footer/</guid>
      <description>&lt;p&gt;Hi there!&lt;/p&gt;

&lt;p&gt;There are a lot of ways how to implement a sticky footer on the page that will always remain at a fixed position on the screen no matter whether the user scroll or not. It will be visible all the time at that specific place (often on bottom).&lt;/p&gt;

&lt;p&gt;I would like to share my way how I added the sticky footer on my site.&lt;/p&gt;

&lt;p&gt;Firstly, I added two separated &lt;div&gt; tags inside the body in index.html and thereby assigning two classes .container and .footer to them:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;body&amp;gt;
  &amp;lt;div class=&amp;quot;container&amp;quot;&amp;gt;
    ...
  &amp;lt;/div&amp;gt;

  &amp;lt;div class=&amp;quot;footer&amp;quot;&amp;gt;
    ...
  &amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The next step is creating the CSS styles in the index.css file and styling these two containers from index.html, where .container will get a margin-bottom with the value equal to the size of the .footer:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.container {
  margin-bottom: 60px;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And then .footer styles will be consisted of the following properties:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.footer {
  width: 100%;
  position: fixed;
  left: 0;
  bottom: 0;
  margin: 0 auto;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s it. I hope this post helped you added a sticky (floating) footer to your site.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Clear Form in Redux when Navigating with React-Router</title>
      <link>https://ilonacodes.github.io/blog/clear-form-in-redux-when-navigating-with-react-router/</link>
      <pubDate>Sun, 19 Mar 2017 19:25:05 +0100</pubDate>
      
      <guid>https://ilonacodes.github.io/blog/clear-form-in-redux-when-navigating-with-react-router/</guid>
      <description>

&lt;p&gt;Hi there!&lt;/p&gt;

&lt;p&gt;I have worked on my project using a React-Redux architecture with React-Router for navigation. I have implemented forms for adding and editing resources. I have observed weird behavior:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Add new resource with a description: &amp;ldquo;Hello World!&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Start editing another resource with a description: &amp;ldquo;My new comment&amp;hellip;&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Input for description contains a previous value: &amp;ldquo;Hello World!&amp;rdquo;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I was expecting to see the current description of the resource: &amp;ldquo;My new comment&amp;hellip;&amp;rdquo;, not the value from the previous form.&lt;/p&gt;

&lt;p&gt;In my case, I was handling the state of the current form by using the same reducer:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// Change form action
export const changeForm = (name, value) =&amp;gt; {
  let change = {};
  change[name] = value;
  return {
    type: &amp;quot;FORM_CHANGE&amp;quot;,
    change
  }
};

// form reducer
export const form = (state = {}, action) =&amp;gt; {
  switch (action.type) {
    case &amp;quot;FORM_CHANGE&amp;quot;:
      return {
          ...state,
          ...action.change
      }

    default:
        return state;
  }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I would like to share the solution that worked for me, my dear reader.&lt;/p&gt;

&lt;h2 id=&#34;clear-state-of-the-form-on-every-navigation&#34;&gt;Clear State of the Form on Every Navigation&lt;/h2&gt;

&lt;p&gt;First of all,  we need to create a new action &amp;ldquo;ROUTER.CHANGE&amp;rdquo; in the routes for handling router change:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;export const ROUTER = {
  CHANGE: &amp;quot;ROUTER_CHANGE&amp;quot;
};

export const changeRouter = (change) =&amp;gt; ({
  type: ROUTER.CHANGE,
  change
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Secondly, we should dispatch this action whenever the user navigates somewhere:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;hashHistory.listen(change =&amp;gt; store.dispatch(changeRouter(change)));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The next step is to add a new case &amp;ldquo;ROUTER.CHANGE&amp;rdquo; in the form reducer and clean up the current state, by returning an empty object:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// form reducer
export const form = (state = {}, action) =&amp;gt; {
  switch (action.type) {
    case &amp;quot;FORM_CHANGE&amp;quot;: ...

    case ROUTER.CHANGE:
       return {};

    default: ...
  }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Now the form state clears itself on every navigation. You can find the whole code change &lt;a href=&#34;https://github.com/ilonade/bookshelf/commit/f961552b2e0a35dcfd6a6b01e52b2b847cae7fa2&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thank you for reading!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to Center Sign Up Form in 3 Simple Steps</title>
      <link>https://ilonacodes.github.io/blog/how-to-center-sign-up-form-in-3-simple-steps/</link>
      <pubDate>Sun, 12 Mar 2017 16:34:40 +0100</pubDate>
      
      <guid>https://ilonacodes.github.io/blog/how-to-center-sign-up-form-in-3-simple-steps/</guid>
      <description>

&lt;p&gt;Hi, everyone!&lt;/p&gt;

&lt;p&gt;I am very happy to welcome you on my blog. A couple of days ago I started creating my new project (that I will have presented to you in a couple of weeks). And I have faced the following problem: I wanted to build a page with Sign Up form, and this page doesn&amp;rsquo;t have any other content.  In that case, it made a lot of sense to center the form, both horizontally and vertically. First of all, I have done some research, tried some solutions, and I want to present what worked for me.&lt;/p&gt;

&lt;h2 id=&#34;step-1-set-up-correct-markup-structure&#34;&gt;Step 1:  Set up correct markup structure&lt;/h2&gt;

&lt;p&gt;My form had both header and form elements, so I had to wrap it in a &amp;ldquo;div&amp;rdquo; container with a particular class so that I can style it:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div class=&amp;quot;sign-up-form&amp;quot;&amp;gt;
    &amp;lt;h1 class=&amp;quot;sign-up-title&amp;quot;&amp;gt;Sign Up&amp;lt;/h1&amp;gt;
    &amp;lt;form&amp;gt;
        &amp;lt;input type=&amp;quot;email&amp;quot; placeholder=&amp;quot;Email&amp;quot; name=&amp;quot;email&amp;quot;/&amp;gt;
        &amp;lt;input type=&amp;quot;password&amp;quot; placeholder=&amp;quot;Password&amp;quot; name=&amp;quot;password&amp;quot;/&amp;gt;
        &amp;lt;input type=&amp;quot;submit&amp;quot; value=&amp;quot;Continue&amp;quot;/&amp;gt;
    &amp;lt;/form&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This container (with class &amp;ldquo;sign-up-form&amp;rdquo;) is the one that we want to center. Therefore, we need also to wrap it in another container (with class &amp;ldquo;center-container&amp;rdquo;) inside which we are centering:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div class=&amp;quot;center-container&amp;quot;&amp;gt;
    &amp;lt;div class=&amp;quot;sign-up-form&amp;quot;&amp;gt;
            ...
    &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;step-2-preparing-the-page-for-centering&#34;&gt;Step 2: Preparing the page for centering&lt;/h2&gt;

&lt;p&gt;The page should occupy the full screen so that we can center the form. That means we need give the page correct size, margins, and paddings:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;html, body {
    margin: 0;
    padding: 0;
    width: 100%;
    height: 100%;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To be able to center the form container we can add &amp;ldquo;display: table&amp;rdquo;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;html, body {
    margin: 0;
    padding: 0;
    width: 100%;
    height: 100%;
    display: table;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;step-3-center-the-form-container&#34;&gt;Step 3: Center the form container&lt;/h2&gt;

&lt;p&gt;Now we are going to center the form vertically and horizontally:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.center-container {
    display: table-cell;
    text-align: center;
    vertical-align: middle;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Also, we have to make the form container of the same size as its content. For that, we can use &amp;ldquo;display: table&amp;rdquo; and &amp;ldquo;margin: 0 auto&amp;rdquo;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.sign-up-form {
    display: table;
    margin: 0 auto;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;That&amp;rsquo;s it. Now we can center our sign up form.&lt;/p&gt;

&lt;p&gt;Thank you for reading.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>https://ilonacodes.github.io/portfolio/</link>
      <pubDate>Sun, 26 Feb 2017 15:35:55 +0100</pubDate>
      
      <guid>https://ilonacodes.github.io/portfolio/</guid>
      <description>&lt;p&gt;&lt;center&gt;&lt;h1&gt;Portfolio&lt;/h1&gt;&lt;/center&gt;&lt;/p&gt;

&lt;div class=&#34;row&#34;&gt;
    &lt;div class=&#34;col-xs-12 col-md-6 text-align: center&#34;&gt;
        &lt;a href=&#34;https://ilonade.github.io/MyToDoList/&#34;&gt;&lt;h4 style=&#34;text-align: center; color: blue;&#34;&gt;ToDo List&lt;/h4&gt;&lt;/a&gt;
        &lt;img class=&#34;portfolio-half-screen-image&#34; style=&#34;max-width: 100%; max-height: 100%;&#34; src=&#34;https://ilonacodes.github.io/img/ToDo.png&#34;&gt;
        &lt;p&gt;&lt;b&gt;Technologies: &lt;/b&gt;HTML5, CSS3, Bootstrap, JavaScript, jQuery, Jasmine&lt;/p&gt;
    &lt;/div&gt;
    &lt;div class=&#34;col-xs-12 col-md-6 text-align: center&#34;&gt;
        &lt;a href=&#34;https://github.com/ilonade/CampaignManager&#34;&gt;&lt;h4 style=&#34;text-align: center; color: blue;&#34;&gt;Campaign Manager&lt;/h4&gt;&lt;/a&gt;
        &lt;img class=&#34;portfolio-half-screen-image&#34; style=&#34;max-width: 100%; max-height: 100%;&#34; src=&#34;https://ilonacodes.github.io/img/CampaignManager.png&#34;&gt;
        
        &lt;p&gt;&lt;b&gt;Technologies: &lt;/b&gt;HTML5, CSS3, Bootstrap, ECMAScript 6, React, Redux, Jasmine&lt;/p&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;row&#34;&gt;
    &lt;div class=&#34;col-xs-12 col-md-6 text-align: center&#34;&gt;
        &lt;a href=&#34;https://ilonade.github.io/FairyRings/Game.html&#34;&gt;&lt;h4 style=&#34;text-align: center; color: blue;&#34;&gt;Fairy Rings&lt;/h4&gt;&lt;/a&gt;
        &lt;img class=&#34;portfolio-half-screen-image&#34; style=&#34;max-width: 100%; max-height: 100%;&#34; src=&#34;https://ilonacodes.github.io/img/Rings.png&#34;&gt;
        &lt;p&gt;&lt;b&gt;Technologies: &lt;/b&gt;HTML5, CSS3, Bootstrap, JavaScript, jQuery, Jasmine&lt;/p&gt;
    &lt;/div&gt;
    &lt;div class=&#34;col-xs-12 col-md-6 text-align: center&#34;&gt;
        &lt;a href=&#34;https://ilonade.github.io/Pomodoro/&#34;&gt;&lt;h4 style=&#34;text-align: center; color: blue;&#34;&gt;Pomodoro&lt;/h4&gt;&lt;/a&gt;
        &lt;img class=&#34;portfolio-half-screen-image&#34; style=&#34;max-width: 100%; max-height: 100%;&#34; src=&#34;https://ilonacodes.github.io/img/Pomodoro.png&#34;&gt;
        
        &lt;p&gt;&lt;b&gt;Technologies: &lt;/b&gt;HTML5, CSS3, JavaScript, jQuery, Jasmine&lt;/p&gt;
    &lt;/div&gt;
    

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&#34;row&#34;&gt;
&lt;center&gt;&lt;h3&gt;Yoga is key to flexability&lt;/h3&gt;&lt;/center&gt;
&lt;br/&gt;
&lt;img class=&#34;portfolio-half-screen-image&#34; src=&#34;https://ilonacodes.github.io/img/Yoga.jpg&#34;&gt;

&lt;center&gt;&lt;h3&gt;Turn your past into valuable experiences&lt;/h3&gt;&lt;/center&gt;
&lt;br/&gt;
&lt;img class=&#34;portfolio-half-screen-image&#34; src=&#34;https://ilonacodes.github.io/img/ZONE 67.jpg&#34;&gt;

&lt;center&gt;&lt;h3&gt;People don’t take trips – trips take people&lt;/h3&gt;&lt;/center&gt;
&lt;br/&gt;
&lt;img class=&#34;portfolio-half-screen-image&#34; src=&#34;https://ilonacodes.github.io/img/Website.jpg&#34;&gt;

&lt;center&gt;&lt;h3&gt;Simple steps to a happier life&lt;/h3&gt;&lt;/center&gt;
&lt;br/&gt;
&lt;img class=&#34;portfolio-half-screen-image&#34; src=&#34;https://ilonacodes.github.io/img/Journal.jpg&#34;&gt;

&lt;center&gt;&lt;h3&gt;Infographic Elements&lt;/h3&gt;&lt;/center&gt;
&lt;br/&gt;
&lt;img class=&#34;portfolio-half-screen-image&#34; src=&#34;https://ilonacodes.github.io/img/INFOGRAPHICS.png&#34;&gt;

&lt;center&gt;&lt;h3&gt;Do Beautiful Things&lt;/h3&gt;&lt;/center&gt;
&lt;br/&gt;
&lt;img class=&#34;portfolio-half-screen-image&#34; src=&#34;https://ilonacodes.github.io/img/Mobile.png&#34;&gt;

&lt;center&gt;&lt;h3&gt;We are problem solvers&lt;/h3&gt;&lt;/center&gt;
&lt;br/&gt;
&lt;img class=&#34;portfolio-half-screen-image&#34; src=&#34;https://ilonacodes.github.io/img/Digit.png&#34;&gt;

&lt;center&gt;&lt;h3&gt;The Jewelry of your life&lt;/h3&gt;&lt;/center&gt;
&lt;br/&gt;
&lt;img class=&#34;portfolio-half-screen-image&#34; src=&#34;https://ilonacodes.github.io/img/BrilliantShop.jpg&#34;&gt;
&lt;/div&gt;

&lt;div style=&#34;text-align: center; opacity: 0.6&#34;&gt;&lt;p&gt;ilonade (c) 2017&lt;/p&gt;&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>