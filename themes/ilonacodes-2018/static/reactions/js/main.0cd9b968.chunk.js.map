{"version":3,"sources":["App.js","serviceWorker.js","index.js","TestApp.js"],"names":["baseUrl","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","countLikes","countDislikes","reacted","addLike","bind","assertThisInitialized","addDislike","loadData","_this2","setState","axios","post","concat","props","resourceId","then","_this3","_this4","get","response","data","likes","dislikes","react_default","a","createElement","className","onClick","index_es","icon","faSmile","faFrown","Component","Boolean","window","location","hostname","match","navigator","serviceWorker","ready","registration","unregister","document","querySelectorAll","forEach","root","encodeURIComponent","getAttribute","ReactDOM","render","src_App_0","testRoot","getElementById"],"mappings":"kLAOIA,+HAIAA,EAAU,8CAuECC,cAnEX,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACVC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAEKI,MAAQ,CACTC,WAAY,SACZC,cAAe,SACfC,SAAS,GAGbV,EAAKW,QAAUX,EAAKW,QAAQC,KAAbX,OAAAY,EAAA,EAAAZ,QAAAY,EAAA,EAAAZ,CAAAD,KACfA,EAAKc,WAAad,EAAKc,WAAWF,KAAhBX,OAAAY,EAAA,EAAAZ,QAAAY,EAAA,EAAAZ,CAAAD,KAClBA,EAAKe,SAAWf,EAAKe,SAASH,KAAdX,OAAAY,EAAA,EAAAZ,QAAAY,EAAA,EAAAZ,CAAAD,KAXNA,mFAeV,OAAOG,KAAKY,6CAGN,IAAAC,EAAAb,KACN,IAAIA,KAAKI,MAAMG,QAMf,OAFAP,KAAKc,SAAS,CAACP,SAAS,IAEjBQ,IAAMC,KAAN,GAAAC,OAActB,EAAd,eAAAsB,OAAmCjB,KAAKkB,MAAMC,WAA9C,UACFC,KAAK,kBAAMP,EAAKD,kDAGZ,IAAAS,EAAArB,KACT,IAAIA,KAAKI,MAAMG,QAMf,OAFAP,KAAKc,SAAS,CAACP,SAAS,IAEjBQ,IAAMC,KAAN,GAAAC,OAActB,EAAd,eAAAsB,OAAmCjB,KAAKkB,MAAMC,WAA9C,aACFC,KAAK,kBAAMC,EAAKT,gDAGd,IAAAU,EAAAtB,KACP,OAAOe,IAAMQ,IAAN,GAAAN,OAAatB,EAAb,eAAAsB,OAAkCjB,KAAKkB,MAAMC,aAC/CC,KAAK,SAAAI,GACF,IAAIC,EAAOD,EAASC,KACpBH,EAAKR,SAAS,CACVT,WAAYoB,EAAKC,MACjBpB,cAAemB,EAAKE,8CAMhC,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBAAkBC,QAAShC,KAAKQ,SAC3CoB,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAiBF,UAAU,uBAAuBG,KAAMC,MACxDP,EAAAC,EAAAC,cAAA,KAAGC,UAAU,yBAAyB/B,KAAKI,MAAMC,aAErDuB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBAAqBC,QAAShC,KAAKW,YAC9CiB,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAiBF,UAAU,0BAA0BG,KAAME,MAC3DR,EAAAC,EAAAC,cAAA,KAAGC,UAAU,4BAA4B/B,KAAKI,MAAME,wBA7DtD+B,aCFEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DA+GA,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzB,KAAK,SAAA0B,GACjCA,EAAaC,eC1HnBC,SAASC,iBAAiB,mBAAmBC,QAAQ,SAAAC,GACjD,IAAMhC,EAAaiC,mBAAmBD,EAAKE,aAAa,qBACxDC,IAASC,OAAO3B,EAAAC,EAAAC,cAAC0B,EAAD,CAAKrC,WAAYA,IAAegC,KAGpD,IAAMM,EAAWT,SAASU,eAAe,aACrCD,GACAH,IAASC,OAAO3B,EAAAC,EAAAC,cCbG,WACnB,OACIF,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAC0B,EAAD,CAAKrC,WAAW,WAChBS,EAAAC,EAAAC,cAAC0B,EAAD,CAAKrC,WAAW,aDSR,MAAYsC","file":"static/js/main.0cd9b968.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\nimport {faFrown, faSmile} from '@fortawesome/free-regular-svg-icons';\n\n\nlet baseUrl;\nif (process.env.NODE_ENV === 'development') {\n    baseUrl = 'http://localhost:8080'\n} else {\n    baseUrl = 'https://reactions-backend.herokuapp.com'\n}\n\nclass App extends Component {\n    constructor() {\n        super();\n\n        this.state = {\n            countLikes: 'â€¦',\n            countDislikes: 'â€¦',\n            reacted: false\n        };\n\n        this.addLike = this.addLike.bind(this);\n        this.addDislike = this.addDislike.bind(this);\n        this.loadData = this.loadData.bind(this);\n    }\n\n    componentDidMount() {\n        return this.loadData();\n    }\n\n    addLike() {\n        if (this.state.reacted) {\n            return;\n        }\n\n        this.setState({reacted: true});\n\n        return axios.post(`${baseUrl}/resources/${this.props.resourceId}/like`)\n            .then(() => this.loadData());\n    }\n\n    addDislike() {\n        if (this.state.reacted) {\n            return;\n        }\n\n        this.setState({reacted: true});\n\n        return axios.post(`${baseUrl}/resources/${this.props.resourceId}/dislike`)\n            .then(() => this.loadData());\n    }\n\n    loadData() {\n        return axios.get(`${baseUrl}/resources/${this.props.resourceId}`)\n            .then(response => {\n                let data = response.data;\n                this.setState({\n                    countLikes: data.likes,\n                    countDislikes: data.dislikes\n                });\n            });\n    }\n\n    render() {\n        return (\n            <div className=\"reaction\">\n                <div className=\"reaction__likes\" onClick={this.addLike}>\n                    <FontAwesomeIcon className=\"reaction__likes-icon\" icon={faSmile}/>\n                    <p className=\"reaction__likes-count\">{this.state.countLikes}</p>\n                </div>\n                <div className=\"reaction__dislikes\" onClick={this.addDislike}>\n                    <FontAwesomeIcon className=\"reaction__dislikes-icon\" icon={faFrown}/>\n                    <p className=\"reaction__dislikes-count\">{this.state.countDislikes}</p>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {TestApp} from './TestApp';\n\nserviceWorker.unregister();\n\ndocument.querySelectorAll('.reactions-root').forEach(root => {\n    const resourceId = encodeURIComponent(root.getAttribute('data-resource-id'));\n    ReactDOM.render(<App resourceId={resourceId}/>, root);\n});\n\nconst testRoot = document.getElementById('test-root');\nif (testRoot) {\n    ReactDOM.render(<TestApp/>, testRoot);\n}\n","import React from 'react';\nimport App from './App';\n\nexport const TestApp = () => {\n    return (\n        <div>\n            <App resourceId=\"test-a\" />\n            <App resourceId=\"test-b\" />\n        </div>\n    );\n};"],"sourceRoot":""}