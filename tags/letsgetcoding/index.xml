<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Letsgetcoding on Ilona Who Codes</title>
    <link>https://ilonacodes.github.io/tags/letsgetcoding/index.xml</link>
    <description>Recent content in Letsgetcoding on Ilona Who Codes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="https://ilonacodes.github.io/tags/letsgetcoding/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>The First User Story, The First Feature With React&#43;Redux</title>
      <link>https://ilonacodes.github.io/blog/the-first-user-story-the-first-feature/</link>
      <pubDate>Thu, 21 Sep 2017 19:30:05 +0100</pubDate>
      
      <guid>https://ilonacodes.github.io/blog/the-first-user-story-the-first-feature/</guid>
      <description>&lt;p&gt;Hi, everyone! I guess you are pretty encouraged to start coding our app. Just to remind: it will be an interactive daily ToDo List. Today I am going to explain: what is a user story? Why do we need to write it before implementing a feature? How will we organize and structure an app? What is, actually, a new feature?&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s start with the first question. In my opinion, user stories are efficient things. To be more preciously, we begin to write them from the perspective of the user and describe them in a very simple way with traditional structure. How it works:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;As a (name of the user)
I want to (some actions or feature)
so that/because (reason and value for the user)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It&amp;rsquo;s possible to add some acceptance criteria to user stories that will indicate what should happen, driven by context and other situations.
In our case, the user story for the first feature will look like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;As Bob
I want to add a new task.
So that I remember what I should do today

## Acceptance Criteria:

Given there are no tasks
And I (Bob) am on the dashboard screen
When I input a new task title
And press enter
Then I see the task on the dashboard screen
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I guess, now you got an idea what the kind of functionality contains the first feature. I recommend writing user stories to understand clearly what the result we want to get and how it should work in the end.&lt;/p&gt;

&lt;p&gt;Coming back to our app, I want you to change into the directory &lt;code&gt;my-daily-todos&lt;/code&gt; and there remove the whole code from the &lt;code&gt;index.js&lt;/code&gt;, because now we are going to structure an app:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Create a new folder &lt;code&gt;Tasks&lt;/code&gt; into &lt;code&gt;src&lt;/code&gt;.
There we will store all our files for the task feature.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Add new files &lt;code&gt;actions.js&lt;/code&gt;, &lt;code&gt;reducers.js&lt;/code&gt;, &lt;code&gt;NewTask.js&lt;/code&gt;, &lt;code&gt;Task.js&lt;/code&gt;, &lt;code&gt;TaskList.js&lt;/code&gt; into &lt;code&gt;Tasks&lt;/code&gt; folder.
As you know, &lt;code&gt;actions.js&lt;/code&gt; and &lt;code&gt;reducers.js&lt;/code&gt; we need for handling states, state changes, and actions. &lt;code&gt;NewTask.js&lt;/code&gt; will contain the component with the input form for a new task and will belong to the navigation bar. &lt;code&gt;Task.js&lt;/code&gt; is a component that presents the &lt;code&gt;task&lt;/code&gt; object with &lt;code&gt;id&lt;/code&gt; and &lt;code&gt;title&lt;/code&gt; properties. &lt;code&gt;TaskList&lt;/code&gt; is a component that presents all the tasks we have created and will appear as the rest of the &amp;ldquo;body&amp;rdquo; of the page.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;span style=&#34;color:red&#34;&gt;Notice! We still use &lt;code&gt;index.js&lt;/code&gt; to render the whole app &lt;code&gt;App.js&lt;/code&gt; in the browser; &lt;code&gt;App.js&lt;/code&gt; to connect &lt;code&gt;NewTask.js&lt;/code&gt; and &lt;code&gt;TaskList.js&lt;/code&gt;, and &lt;code&gt;App.css&lt;/code&gt; to make a basic design for our app.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;3&amp;hellip;2&amp;hellip;1&amp;hellip; And now. Finally, let&amp;rsquo;s start coding!
To refer to the app structure, I advise you to start developing with the components and then add redux functionalities and properties such as actions and reducers with states. As I mentioned above, at the beginning I write the &lt;code&gt;NewTask.js&lt;/code&gt; component, so switch to there and begin your coding journey. I added some comment to make it easy to understand the basic principle how it works. Now you see what we have here:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// my-daily-todos/src/Tasks/NewTask.js

import React, { Component } from &#39;react&#39;;
import { connect } from &#39;react-redux&#39;;

import { actions } from &#39;./actions&#39;;

// here we create a component that will connect to NewTask component

const NewTaskComponent = ({addTask}) =&amp;gt; {

// this function is in charge of handling Enter key on a new task submit

function handleKeyPress (e) {
  if (e.key === &#39;Enter&#39;) {
    addTask(e.target.value);
    e.target.value = &#39;&#39;;      // make an input field empty after pressing Enter
    e.preventDefault();
  }
}

// what UI component contains
  return &amp;lt;div&amp;gt;
    &amp;lt;input
      type=&#39;text&#39;
      placeholder=&#39;Add a new task...&#39;
      onKeyPress={handleKeyPress}
    /&amp;gt;
  &amp;lt;/div&amp;gt;
}

const mapStateToProps = (state) =&amp;gt; {
  return {

  }
}

// which actions dispatch to reducer
const mapDispatchToProps = (dispatch) =&amp;gt; {
  return {
    addTask: (title) =&amp;gt; dispatch(actions.addTask(title))
  }
}

// export the NewTaks component to App.js
export const NewTask = connect(
  mapStateToProps,
  mapDispatchToProps
)(NewTaskComponent);

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The next &lt;code&gt;Task.js&lt;/code&gt; component renders the &lt;code&gt;task&lt;/code&gt; object in the browser:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// my-daily-todos/src/Tasks/Task.js

import React from &#39;react&#39;;

// the argument is a task object that return the title task
export const Task = ({task}) =&amp;gt; {
  return &amp;lt;div&amp;gt;
    {task.title}
  &amp;lt;/div&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We also need a component &lt;code&gt;TaskList.js&lt;/code&gt; that will render all tasks that we have added/created through the input:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// my-daily-todos/src/Tasks/TaskList.js

import React, { Component } from &#39;react&#39;;
import { connect } from &#39;react-redux&#39;;

// import Task component
import { Task } from &#39;./Task.js&#39;;

const TaskListComponent = ({tasks}) =&amp;gt; {
  return &amp;lt;div&amp;gt;
    &amp;lt;ul&amp;gt;
 // create a dynamic task list with javascript inside html and pass properties to the Task component
      {tasks.map(task =&amp;gt;
        &amp;lt;li&amp;gt;
          // key={.. something unique ..} is important when rendering lists in react
          &amp;lt;Task key={task.id} task={task} /&amp;gt;
        &amp;lt;/li&amp;gt;
      )}
    &amp;lt;/ul&amp;gt;
  &amp;lt;/div&amp;gt;
}

// collect the tasks state that would be passing to the store of states
const mapStateToProps = (state) =&amp;gt; {
  return {
    tasks: state.tasks
  }
}

const mapDispatchToProps = (dispatch) =&amp;gt; {
  return {

  }
}

// export the TaskList component to App.js
export const TaskList = connect(
  mapStateToProps,
  mapDispatchToProps
)(TaskListComponent);

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We still should make a couple of steps to make our app work. Also, the next step is to write action &lt;code&gt;addTask&lt;/code&gt; to &lt;code&gt;actions.js&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// my-daily-todos/src/Tasks/actions.js

// create t const to define a list actions
export const t = {
  ADD_TASK: &#39;ADD_TASK&#39;
}

// export actions with addTask action creator passing title as argument to component NewTask.js and reducers

export const actions = {
  addTask: title =&amp;gt; ({
    type: t.ADD_TASK,
    title
  })
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Good job! As you noticed, we still don&amp;rsquo;t have any reducer. That&amp;rsquo;s why we open &lt;code&gt;reducers.js&lt;/code&gt; file and write a reducer:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// my-daily-todos/src/Tasks/reducers.js

import { t } from &#39;./actions&#39;;

// create initial state. In our case, it is an empty list of tasks
const initState = []

// create a function that generates ID for every task randomly
function generateID () {
  return &#39;_&#39; + Math.random().toString(36).substr(2,9);
}

// create tasksReducer with state as initState and action as arguments

export const tasksReducer = (state = initState, action) =&amp;gt; {

  switch (action.type) {

// the ADD_TASK action has to return all previous state and a new task with generated ID and typed title

    case t.ADD_TASK:
      return [
        ...state,
        {
          id: generateID(),
          title: action.title
        }
      ]

// otherwise, return just previous state that is initState
    default:
      return state;
  }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To store and to change states, it&amp;rsquo;s necessary to have a store with reducers and provide that states to render in the browser. All of that we should apply into &lt;code&gt;index.js&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// my-daily-todos/src/index.js

import React from &#39;react&#39;;
import ReactDOM from &#39;react-dom&#39;;
import { createStore, combineReducers } from &#39;redux&#39;;
import { Provider } from &#39;react-redux&#39;;

// all custom imports
import &#39;./index.css&#39;;
import { App } from &#39;./App.js&#39;;
import { tasksReducer } from &#39;./Tasks/reducers.js&#39;;

// create store using createStore() including combineReducers() to pass the taskReducer with name &amp;quot;tasks&amp;quot;

let store = createStore(
  combineReducers({
    tasks: tasksReducer
  }),
);

ReactDOM.render(
// apply store to store states and make them available to dispatch in components

  &amp;lt;Provider store={store}&amp;gt;
    &amp;lt;App /&amp;gt;
  &amp;lt;/Provider&amp;gt;,
  document.getElementById(&#39;root&#39;)
);

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, we can connect all above components (apart from &lt;code&gt;Task.js&lt;/code&gt; that is already used inside of &lt;code&gt;TaskList.js&lt;/code&gt; component) in one component - &lt;code&gt;App.js&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// my-daily-todos/src/App.js

import React, { Component } from &#39;react&#39;;

import &#39;./App.css&#39;;
// import both components
import { NewTask } from &#39;./Tasks/NewTask.js&#39;;
import { TaskList } from &#39;./Tasks/TaskList.js&#39;;

export const App = () =&amp;gt; {
// pass both components to App.js
  return &amp;lt;div&amp;gt;
    &amp;lt;NewTask /&amp;gt;
    &amp;lt;TaskList /&amp;gt;
  &amp;lt;/div&amp;gt;
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s it. Just change into &lt;code&gt;my-daily-todos&lt;/code&gt; directory and run your local server using &lt;code&gt;npm start&lt;/code&gt; command in the terminal.&lt;/p&gt;

&lt;p&gt;If you want, to make your app fancy, then you can apply some CSS styles to classes that I assign in tags below. Just come back to &lt;code&gt;App.js&lt;/code&gt; component:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// my-daily-todos/src/App.js

import React, { Component } from &#39;react&#39;;
import { connect } from &#39;react-redux&#39;;

// we have already imported App.css to make things look good
import &#39;./App.css&#39;;
import { NewTask } from &#39;./Tasks/NewTask.js&#39;
import { TasksList } from &#39;./Tasks/TasksList&#39;;

export const App = () =&amp;gt; {
// add one more div tag and assign the classes
  return &amp;lt;div className=&#39;container&#39;&amp;gt;
      &amp;lt;div className=&#39;navbar&#39;&amp;gt;
        &amp;lt;div className=&#39;logo&#39;&amp;gt;
          &amp;lt;h1&amp;gt;ToDoDaily&amp;lt;/h1&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;NewTask /&amp;gt;
      &amp;lt;/div&amp;gt;
      &amp;lt;TasksList /&amp;gt;
    &amp;lt;/div&amp;gt;
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The same thing we are doing for the &lt;code&gt;TaskList.js&lt;/code&gt; component. Just adding the &lt;code&gt;tasklist-container&lt;/code&gt; class to the div tag after return:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;my-daily-todos/src/Tasks/TaskList.js
...
export const TasksListComponent = ({tasks, completeTask}) =&amp;gt; {
  return &amp;lt;div className=&amp;quot;taskslist-container&amp;quot;&amp;gt;
    &amp;lt;ul&amp;gt;
    {tasks.map(task =&amp;gt;
      &amp;lt;li&amp;gt;
...

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;span style=&#34;color:red&#34;&gt;If you take a look at &lt;code&gt;index.js&lt;/code&gt;, you will notice, that &lt;code&gt;App.js&lt;/code&gt; is already imported.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;All that remains is to design our app. As you noticed, we have already Logo, which with input field belongs to the navigation bar according to the idea how the app will look at the end. Now we are going to App.css and style our app with simple CSS rules:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;/* my-daily-todos/src/App.css */

.container {
  padding: 0;
  margin: 0;
}

.navbar {
  background-color: #333;
  overflow: hidden;
  display: block;
  width: 100%;
  height: 80px;
}

.logo {
  float: left;
  color: white;
  margin-left: 2rem;
}

input {
  float: none;
  color: black;
  padding: 5px 25px;
  margin: 1.8rem;
  border-radius: 3px;
  border-width: 1px;
}

.taskslist-container {
  margin-top: 1rem;
  margin-left: 1rem;
}

.taskslist-container ul li .completed{
  text-decoration: line-through;
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we have completed the first feature for our app and can move forward to increase the functionality of the app by adding new features using React+Redux and their dependencies.&lt;/p&gt;

&lt;p&gt;If you still have any questions how it works or why something doesn&amp;rsquo;t work for you, don&amp;rsquo;t hesitate and find me via my &lt;a href=&#34;mailto:demiluri@gmail.com&#34;&gt;email&lt;/a&gt; or on my &lt;a href=&#34;https://www.instagram.com/ilonacodes/&#34;&gt;Instagram profile&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thank you for your reading and wish you the best luck by learning React+Redux frameworks!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Simple Usage of React&#43;Redux</title>
      <link>https://ilonacodes.github.io/blog/simple-usage-of-react-redux/</link>
      <pubDate>Sun, 17 Sep 2017 20:00:05 +0100</pubDate>
      
      <guid>https://ilonacodes.github.io/blog/simple-usage-of-react-redux/</guid>
      <description>&lt;p&gt;As I promised in &lt;a href=&#34;http://www.ilonacodes.com/blog/react-for-very-very-beginners/&#34;&gt;my previous post&lt;/a&gt;, today I am going to tell you about Redux, why and how we need to use them in common.
Let me introduce React+Redux co-working through the simple input change that should render &lt;code&gt;Hello, {any name / text}!&lt;/code&gt; at the end and manage by redux states.&lt;/p&gt;

&lt;p&gt;Redux? What is it?
Redux is a predictable state container for managing both UI-state and data-state in JavaScript applications. It helps you create applications that behave consistently and run in different environments like client, server, and native. To add Redux dependencies to your application type and run in a command line:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install --save redux
npm install --save react-redux
npm install --save-dev redux-devtools
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can read more about that &lt;a href=&#34;http://redux.js.org/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s come back to the &lt;code&gt;my-daily-todos&lt;/code&gt; directory in the &lt;code&gt;workspace&lt;/code&gt; that we set up in my previous post and change into &lt;code&gt;my-daily-todos/src/index.js&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color:red&#34;&gt;It&amp;rsquo;s not a good style to write all code parts in one file, and I do that only for this example.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;I recommend you to remove all code inside and just replace that with:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import React from &#39;react&#39;;
import ReactDOM from &#39;react-dom&#39;;
import &#39;./index.css&#39;;

const Hello = () =&amp;gt; {
  return &amp;lt;div&amp;gt;
    &amp;lt;input type=&#39;text&#39; /&amp;gt;
    &amp;lt;p&amp;gt;Hello, World!&amp;lt;/p&amp;gt;
  &amp;lt;/div&amp;gt;
}

ReactDOM.render(&amp;lt;Hello /&amp;gt;,
  document.getElementById(&#39;root&#39;)
);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you noticed, now we are going to render the &lt;code&gt;Hello&lt;/code&gt; component in the browser.&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color:red&#34;&gt;Don&amp;rsquo;t forget run local server on your computer from the &lt;code&gt;my-daily-todos&lt;/code&gt; directory using &lt;code&gt;npm start&lt;/code&gt; in the command line.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;What you should see in the browser is an input field and the simple message &lt;code&gt;Hello, World!&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now I am going to add some props to our code, which could make you confused, but don&amp;rsquo;t worry I will explain that below:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import React from &#39;react&#39;;
import ReactDOM from &#39;react-dom&#39;;
import { connect, Provider } from &#39;react-redux&#39;;

import &#39;./index.css&#39;;

const HelloComponent = ({name, updateName}) =&amp;gt; {
  return &amp;lt;div&amp;gt;
    &amp;lt;input type=&#39;text&#39;
           value={name}
           onChange={e =&amp;gt; updateName(e.target.value)}
    /&amp;gt;
    &amp;lt;p&amp;gt;Hello, World!&amp;lt;/p&amp;gt;
  &amp;lt;/div&amp;gt;
}

const mapStateToProps = (state) =&amp;gt; {
  return {

  }
}

const mapDispatchToProps = (dispatch) =&amp;gt; {
  return {

  }
}

const Hello = connect(
  mapStateToProps,
  mapDispatchToProps
)(HelloComponent);

ReactDOM.render(
  &amp;lt;Provider&amp;gt;
    &amp;lt;Hello /&amp;gt;
  &amp;lt;/Provider&amp;gt;,
  document.getElementById(&#39;root&#39;)
);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Yeah, it doesn&amp;rsquo;t render anymore, does it? ;) First of all, you see some values inside the &lt;code&gt;Hello&lt;/code&gt; component and don&amp;rsquo;t have any idea from where they come. Secondly, you noticed three new constants &lt;code&gt;mapStateToProps&lt;/code&gt;,  &lt;code&gt;mapDispatchToProps&lt;/code&gt; and &lt;code&gt;Hello&lt;/code&gt;. As you guess, the last one connects two previous via &lt;code&gt;HelloComponent&lt;/code&gt; connector and all these elements with all props should be rendering in &amp;ldquo;Hello&amp;rdquo; component via &lt;code&gt;Provider&lt;/code&gt; component. That is where Redux comes in: &lt;code&gt;mapStateToProps&lt;/code&gt; allows to read any application state, and &lt;code&gt;mapDispatchToProps&lt;/code&gt; allows to dispatch state changes.
Right now, the logical question: &amp;ldquo;Where should it manage state and dispatch actions?&amp;rdquo;&lt;/p&gt;

&lt;p&gt;The answer is into the store:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import { connect, Provider } from &#39;react-redux&#39;;
import { createStore, combineReducers } from &#39;redux&#39;;

// ...

const Hello = connect(
  mapStateToProps,
  mapDispatchToProps
)(HelloComponent);

let store = createStore(
  combineReducers({}),
);

ReactDOM.render(
  &amp;lt;Provider store={store}&amp;gt;
    &amp;lt;Hello /&amp;gt;
  &amp;lt;/Provider&amp;gt;,
  document.getElementById(&#39;root&#39;)
);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We created a store variable using &lt;code&gt;createStore&lt;/code&gt; function to create a store and combineReducers function to add reducers (we will speak about that a bit later).&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color:red&#34;&gt;Notice! All components and functions that belong to React and Redux must be imported at the beginning of the file.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Finally, it renders correctly in the browser, and still, nothing changed. As I mentioned above, we need to add a reducer, but I would like to start from the action creating:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// ...

const Hello = connect(
  mapStateToProps,
  mapDispatchToProps
)(HelloComponent);

/* Action */
// create action type
const UPDATE_NAME = &#39;UPDATE_NAME&#39;

// action creators
function updateName(name) {
  return { type: UPDATE_NAME, name }
}

// ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We are using the action to send data from the application to the store via dispatch function that notifies store about the current state that the store gets from the reducer:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;/* Reducer */

//create an initial state with empty name as a value
const initState = { name: &#39;&#39; }

// create a reducer
const greetingReducer = (state = initState, action) =&amp;gt; {
  switch (action.type) {
    case UPDATE_NAME:
      return Object.assign({}, state, {
        name: action.name
      })

    default:
      return state;
  }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;These are action cases that are responsible for the defined behavior for the dispatched action. In our case, our goal is to update the name by input = change the input value and see results on the screen in the browser. After creating the reducer, we have to combine it via &lt;code&gt;combineReducers&lt;/code&gt; in the store and give it a name to use:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// ...

let store = createStore(
  combineReducers({
    greeting: greetingReducer
  }),
);

//...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, we are ready to provide all states and all actions (for this feature we have only one state and one action) adding them to
&lt;code&gt;mapStateToProps&lt;/code&gt; and &lt;code&gt;mapDispatchToProps&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const mapStateToProps = (state) =&amp;gt; {
  return {
    name: state.greeting.name
  }
}

const mapDispatchToProps = (dispatch) =&amp;gt; {
  return {
    updateName: (name) =&amp;gt; dispatch(updateName(name))
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And all these props are already used in &lt;code&gt;HelloComponent&lt;/code&gt;. Just check this component and find them.&lt;/p&gt;

&lt;p&gt;The last step is to make things work properly and see the results on the screen in the browser. So, we have to add &lt;code&gt;{name}&lt;/code&gt; property instead of the &amp;ldquo;World&amp;rdquo; inside the &amp;ldquo;Hello, World!&amp;rdquo;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const HelloComponent = ({name, updateName}) =&amp;gt; {
  return &amp;lt;div&amp;gt;
    &amp;lt;input type=&#39;text&#39;
           value={name}
           onChange={e =&amp;gt; updateName(e.target.value)}
    /&amp;gt;
    &amp;lt;p&amp;gt;Hello, {name}!&amp;lt;/p&amp;gt;
  &amp;lt;/div&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s it. It should work. If you have any questions, you can reach me through the &lt;a href=&#34;mailto:demiluri@gmail.com&#34;&gt;email&lt;/a&gt; or in direct messages on &lt;a href=&#34;https://www.instagram.com/ilonacodes/&#34;&gt;Instagram&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The whole code is below:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import React from &#39;react&#39;;
import ReactDOM from &#39;react-dom&#39;;
import { connect, Provider } from &#39;react-redux&#39;;
import { createStore, combineReducers } from &#39;redux&#39;;

import &#39;./index.css&#39;;

/* Component */
const HelloComponent = ({name, updateName}) =&amp;gt; {
  return &amp;lt;div&amp;gt;
    &amp;lt;input type=&#39;text&#39;
           value={name}
           onChange={e =&amp;gt; updateName(e.target.value)}
    /&amp;gt;
    &amp;lt;p&amp;gt;Hello, {name}!&amp;lt;/p&amp;gt;
  &amp;lt;/div&amp;gt;
}

const mapStateToProps = (state) =&amp;gt; {
  return {
    name: state.greeting.name
  }
}

const mapDispatchToProps = (dispatch) =&amp;gt; {
  return {
    updateName: (name) =&amp;gt; dispatch(updateName(name))
  }
}

const Hello = connect(
  mapStateToProps,
  mapDispatchToProps
)(HelloComponent);

/* Action */
const UPDATE_NAME = &#39;UPDATE_NAME&#39;

function updateName(name) {
  return { type: UPDATE_NAME, name }
}

/* Reducer */
const initState = { name: &#39;&#39; }

const greetingReducer = (state = initState, action) =&amp;gt; {
  switch (action.type) {
    case UPDATE_NAME:
      return Object.assign({}, state, {
        name: action.name
      })

    default:
      return state;
  }
}

/* store */
let store = createStore(
  combineReducers({
    greeting: greetingReducer
  }),
);

/* Provider using store */
ReactDOM.render(
  &amp;lt;Provider store={store}&amp;gt;
    &amp;lt;Hello /&amp;gt;
  &amp;lt;/Provider&amp;gt;,
  document.getElementById(&#39;root&#39;)
);

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the next post, we will start writing an interactive TODO list with user stories step by step using React+Redux technologies stack.&lt;/p&gt;

&lt;p&gt;Thank you for reading! Happily, you got the basic idea of React+Redux &amp;ldquo;co-working&amp;rdquo; and became ready to start your journey within.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>React For Very Very Beginners</title>
      <link>https://ilonacodes.github.io/blog/react-for-very-very-beginners/</link>
      <pubDate>Fri, 15 Sep 2017 16:25:05 +0100</pubDate>
      
      <guid>https://ilonacodes.github.io/blog/react-for-very-very-beginners/</guid>
      <description>&lt;p&gt;The biggest challenge for beginners not only in front end development but also in the whole web development world is to find the answer to the question: How / Where should I start to learn web development? Some of these questions I have already received via private messages on social networks, and that encouraged me to create a series of small posts to write and complete the first app using JS (ECMA6) with React-Redux frameworks on which technologies I specialize.&lt;/p&gt;

&lt;p&gt;Our goal for the first application is to write an interactive daily TODO list application. In particular, by finishing this series, you should be able to understand the basic concepts, structures and &amp;ldquo;communication&amp;rdquo; between React-Redux in use.&lt;/p&gt;

&lt;p&gt;No more talking and let&amp;rsquo;s start. I am sure my readers are pretty curious about how to manage and control operation flow on the computer and already familiar with some Unix commands to manage their stuff in command line. However, I am going to write down some of them that we will use. First, we should make a workspace directory for the app and then change into this directory.&lt;/p&gt;

&lt;p&gt;Type in the command line:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd
mkdir workspace
cd workspace
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And voilà! We are already inside the directory for our app!&lt;/p&gt;

&lt;p&gt;The next step is to install npm. It is a package manager for Node.js that creates some of your directory structure/organization. Also, helps with installing various packages and resolving their dependencies.&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color:red&#34;&gt; If you didn&amp;rsquo;t use Node.js before, you should install it. Just visit this link &lt;a href=&#34;https://nodejs.org/en/download/&#34;&gt;https://nodejs.org/en/download/&lt;/a&gt; and install it. &lt;/span&gt;&lt;/p&gt;

&lt;p&gt;It will be enough for our app to type this command in the Unix command line:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install npm@latest -g
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Don&amp;rsquo;t forget to check the version of npm (double-check if it has been installed correctly) running this command in your terminal:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm -v
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, we are ready to create our first React-App! Notice that we are still in the workspace directory and continue typing in the terminal the commands below:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install -g create-react-app
create-react-app my-daily-todos
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Yeah, here we are getting started with React. The first line allows us to install the global package and the second one to use it to create a new React App with the name &amp;ldquo;my-daily-todos&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Congratulations! You have installed your first React-App. And to see the results, how it looks like, we have to launch the development server:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm start
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And the browser will automatically open URL of the created React application on the random localhost address.
Sure, you are encouraged to learn more about the React structure.&lt;/p&gt;

&lt;p&gt;So now we are moving to the next step: open our app and take a look at the code in your favorite text/code editor.
Don&amp;rsquo;t forget that the local server is still working and we could check our changes in the code by refreshing the page with the localhost address. Now I am going to render &amp;ldquo;Oh, hi there!&amp;rdquo; message. In our case, we have to open App.js (my-daily-todos/src/App.js). What should you see on the screen:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import React, { Component } from &#39;react&#39;;
import logo from &#39;./logo.svg&#39;;
import &#39;./App.css&#39;;

class App extends Component {
  render() {
    return (
      &amp;lt;div className=&amp;quot;App&amp;quot;&amp;gt;
        &amp;lt;div className=&amp;quot;App-header&amp;quot;&amp;gt;
          &amp;lt;img src={logo} className=&amp;quot;App-logo&amp;quot; alt=&amp;quot;logo&amp;quot; /&amp;gt;
          &amp;lt;h2&amp;gt;Welcome to React&amp;lt;/h2&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;p className=&amp;quot;App-intro&amp;quot;&amp;gt;
          To get started, edit &amp;lt;code&amp;gt;src/App.js&amp;lt;/code&amp;gt; and save to reload.
        &amp;lt;/p&amp;gt;
      &amp;lt;/div&amp;gt;
    );
  }
}

export default App;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And then just to add a new paragraph-tag with the text: &amp;ldquo;Oh, hi there!&amp;rdquo; inside the &lt;code&gt;className&lt;/code&gt; &amp;ldquo;App&amp;rdquo;, after the &lt;code&gt;className&lt;/code&gt; &amp;ldquo;App-intro&amp;rdquo;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import React, { Component } from &#39;react&#39;;
import logo from &#39;./logo.svg&#39;;
import &#39;./App.css&#39;;

class App extends Component {
  render() {
    return (
      &amp;lt;div className=&amp;quot;App&amp;quot;&amp;gt;
        &amp;lt;div className=&amp;quot;App-header&amp;quot;&amp;gt;
          &amp;lt;img src={logo} className=&amp;quot;App-logo&amp;quot; alt=&amp;quot;logo&amp;quot; /&amp;gt;
          &amp;lt;h2&amp;gt;Welcome to React&amp;lt;/h2&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;p className=&amp;quot;App-intro&amp;quot;&amp;gt;
          To get started, edit &amp;lt;code&amp;gt;src/App.js&amp;lt;/code&amp;gt; and save to reload.
        &amp;lt;/p&amp;gt;

        &amp;lt;p&amp;gt;
          Oh, hi there!
        &amp;lt;/p&amp;gt;

      &amp;lt;/div&amp;gt;
    );
  }
}

export default App;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After refreshing the localhost page, you should see the added text below the previous content.&lt;/p&gt;

&lt;p&gt;Hopefully,  you enjoyed my explanation how to start with React and would like to know more about the launching Redux, why we need it and look closer to all our dependencies in one file.&lt;/p&gt;

&lt;p&gt;Thank you for reading and your kind interest in my post!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>