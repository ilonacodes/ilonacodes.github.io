<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Javascript on Ilona Who Codes</title>
    <link>http://www.ilonacodes.com/tags/javascript/index.xml</link>
    <description>Recent content in Javascript on Ilona Who Codes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://www.ilonacodes.com/tags/javascript/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Front-end Shorts: Fetch List of Resources From REST-API</title>
      <link>http://www.ilonacodes.com/blog/front-end-shorts-fetch-list-of-resources-from-rest-api/</link>
      <pubDate>Sat, 17 Mar 2018 15:00:05 +0100</pubDate>
      
      <guid>http://www.ilonacodes.com/blog/front-end-shorts-fetch-list-of-resources-from-rest-api/</guid>
      <description>&lt;p&gt;Today I am going to tell you how to get JSON data from the Rest-API to UI using React+Redux frameworks.&lt;/p&gt;

&lt;p&gt;In my case, the task looks like:&lt;/p&gt;

&lt;p&gt;I have a URL, for example: &lt;code&gt;https://api.com/v1/expenses/&lt;/code&gt; which will give the following JSON data, and I want to get this data in my UI.&lt;/p&gt;

&lt;p&gt;To solve this task, I decided to use JavaScriptâ€™s &lt;code&gt;fetch&lt;/code&gt; method. So in this way, I shouldn&amp;rsquo;t rely on any external libraries (given my target browsers are remotely up-to-date).&lt;/p&gt;

&lt;p&gt;What is nice, that by default the fetch method uses &lt;code&gt;GET&lt;/code&gt; and I don&amp;rsquo;t have to specify any options, however, you can do all that if you want. For further reference: &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch#Response_objects&#34;&gt;Fetch API reference&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s look at the following code snippet of my implementation:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;
const loadExpenses = () =&amp;gt; {
       fetch(&#39;https://api.com/v1/expenses/&#39;)
            .then(response =&amp;gt; response.json())
            .then(expenses =&amp;gt; loadedExpenses(expenses))
};

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;*loadedExpenses is a function that dispatches action to Redux and then reducer stores the data in the store.&lt;/p&gt;

&lt;p&gt;Thank you for reading and have a lovely weekend!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Front-end Shorts: Setting up React-Router-Redux</title>
      <link>http://www.ilonacodes.com/blog/frontend-shorts-setting-up-react-router-redux/</link>
      <pubDate>Wed, 14 Mar 2018 15:30:05 +0100</pubDate>
      
      <guid>http://www.ilonacodes.com/blog/frontend-shorts-setting-up-react-router-redux/</guid>
      <description>&lt;p&gt;Hi, everyone! How is your week going?&lt;/p&gt;

&lt;p&gt;Yesterday I worked with the web application written on React + Redux and had had some problem with the &lt;code&gt;react-router-redux&lt;/code&gt; library. In short, the &lt;code&gt;push&lt;/code&gt; method (using for navigation outside of components) didn&amp;rsquo;t work.&lt;/p&gt;

&lt;p&gt;Firstly, I have tried to set the Route component in the &amp;ldquo;traditional&amp;rdquo; way such as with react-router library. That might get the history props. Unfortunately, that also didn&amp;rsquo;t work.
Because of Redux framework.&lt;/p&gt;

&lt;p&gt;After spending time on the Internet, I found the issue how to navigate events via Redux actions: I missed routerMiddleware as the second parameter for my store:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// index.js

import React from &#39;react&#39;;
import ReactDOM from &#39;react-dom&#39;;
import {applyMiddleware, combineReducers, compose, createStore} from &#39;redux&#39;;
import {browserHistory} from &#39;react-router&#39;;
import {routerMiddleware, routerReducer, syncHistoryWithStore} from &#39;react-router-redux&#39;;

import {Routes} from &#39;./components/Routes&#39;;
import {expenseFormReducer, expensesReducer} from &#39;./reducers/expensesReducer&#39;;

import &#39;./index.css&#39;;

const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;

let store = createStore(
    combineReducers({
        routing: routerReducer,
        expenses: expensesReducer,
        expenseForm: expenseFormReducer
    }),
    composeEnhancers(
        applyMiddleware(
            routerMiddleware(browserHistory)
        )
    ),
);

const history = syncHistoryWithStore(browserHistory, store);

ReactDOM.render(&amp;lt;Routes history={history} store={store}/&amp;gt;,
    document.getElementById(&#39;root&#39;)
);

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After applying that all routes to different component work correctly.&lt;/p&gt;

&lt;p&gt;Thank you for the reading. If you have any questions or suggestions how it should have written on, then just get in touch with me either on my &lt;a href=&#34;https://twitter.com/ilonacodes&#34;&gt;Twitter&lt;/a&gt; or &lt;a href=&#34;https://www.instagram.com/ilonacodes&#34;&gt;Instagram&lt;/a&gt; profiles.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Front-end Shorts: How to Create Parallax Effect With Vanilla JS</title>
      <link>http://www.ilonacodes.com/blog/how-to-create-parallax-effect-with-vanilla-js/</link>
      <pubDate>Sat, 10 Mar 2018 20:45:05 +0100</pubDate>
      
      <guid>http://www.ilonacodes.com/blog/how-to-create-parallax-effect-with-vanilla-js/</guid>
      <description>&lt;p&gt;Hi, there! I hope you enjoy your weekend, and ready for a new post.&lt;/p&gt;

&lt;p&gt;Recently there are a lot of sites, which have featured with parallax scrolling effect, that represents them in more interactive &amp;ldquo;professionally-made&amp;rdquo; way.&lt;/p&gt;

&lt;p&gt;This fact made me recreate the effect using Vanilla JavaScript, an example of which you can see below.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s a look at the implementation of &lt;code&gt;parallax effect in Vanilla JavaScript&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I have used a &amp;lsquo;scroll&amp;rsquo; event on browser &amp;lsquo;window,&amp;rsquo; and retrieved the number of pixels the document is currently scrolled along the vertical axis from &amp;lsquo;window.pageYOffset&amp;rsquo;.&lt;/p&gt;

&lt;p&gt;The constant &amp;lsquo;background&amp;rsquo; consists of the image for which we are going to apply the parallax effect.&lt;/p&gt;

&lt;p&gt;Finally, I compute the scrolling interval in pixels for the &amp;lsquo;top&amp;rsquo; attribute.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;
    window.addEventListener(&#39;scroll&#39;, function (e) {
        // will not work on IE &amp;lt; 9
        var scrolled = window.pageYOffset;
        // will not work on IE &amp;lt; 8
        const background = document.querySelector(&#39;.background&#39;);
        background.style.top = - (scrolled * 0.2) + &#39;px&#39;;
    });

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Tune the coefficient &amp;lsquo;0.2&amp;rsquo; to your liking.&lt;/p&gt;

&lt;p&gt;If you liked the article, it would make me happy if you shared it on your favourite social networks!&lt;/p&gt;

&lt;p&gt;If you have any questions, suggestions or recommendations feel free to reach out to me &lt;a href=&#34;https://twitter.com/ilonacodes&#34;&gt;on Twitter&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Happy coding!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Front-end Shorts: How to Scroll to Element in jQuery With Animation</title>
      <link>http://www.ilonacodes.com/blog/front-end-shorts-how-to-scroll-to-element-in-jquery-with-animation/</link>
      <pubDate>Thu, 08 Mar 2018 16:30:05 +0100</pubDate>
      
      <guid>http://www.ilonacodes.com/blog/front-end-shorts-how-to-scroll-to-element-in-jquery-with-animation/</guid>
      <description>&lt;p&gt;Here I am back and decided to continue blogging with front-end shorts. Unfortunately, I don&amp;rsquo;t have enough time to write big posts, but I would be happy to share some frontend tips and tricks that I have already applied for some of my projects.&lt;/p&gt;

&lt;p&gt;The last days I had to work with Javascript and jQuery a lot apart from React and spent much time on creating templates. As you know, nowadays modern web pages include animated scrolling, which makes any site look professional and more elegant (instead of simple link element reference in HTML5).&lt;/p&gt;

&lt;p&gt;The user story was:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;When the user clicks on the button,
the page scroll to the specific element with a nice animation.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That forced me, to use &lt;code&gt;jQuery scrollTop animation&lt;/code&gt;.
Assuming there is a button, with the id &amp;ldquo;button&amp;rdquo;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;$(&amp;quot;#button&amp;quot;).click(function() {
    $(&#39;html, body&#39;).animate({
        scrollTop: $(&amp;quot;#elementToScroll&amp;quot;).offset().top
    }, 1000);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this case, we are scrolling the height of the element. offset()
return the coordinates of the element relative to the DOM, and top param gives us the element&amp;rsquo;s distance in pixels along the y-axis.&lt;/p&gt;

&lt;p&gt;Thank you for reading. I hope you like this small &lt;code&gt;jQuery animation&lt;/code&gt; tip.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Clear Form in Redux when Navigating with React-Router</title>
      <link>http://www.ilonacodes.com/blog/clear-form-in-redux-when-navigating-with-react-router/</link>
      <pubDate>Sun, 19 Mar 2017 19:25:05 +0100</pubDate>
      
      <guid>http://www.ilonacodes.com/blog/clear-form-in-redux-when-navigating-with-react-router/</guid>
      <description>

&lt;p&gt;Hi there!&lt;/p&gt;

&lt;p&gt;I have worked on my project using a React-Redux architecture with React-Router for navigation. I have implemented forms for adding and editing resources. I have observed weird behavior:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Add new resource with a description: &amp;ldquo;Hello World!&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Start editing another resource with a description: &amp;ldquo;My new comment&amp;hellip;&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Input for description contains a previous value: &amp;ldquo;Hello World!&amp;rdquo;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I was expecting to see the current description of the resource: &amp;ldquo;My new comment&amp;hellip;&amp;rdquo;, not the value from the previous form.&lt;/p&gt;

&lt;p&gt;In my case, I was handling the state of the current form by using the same reducer:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// Change form action
export const changeForm = (name, value) =&amp;gt; {
  let change = {};
  change[name] = value;
  return {
    type: &amp;quot;FORM_CHANGE&amp;quot;,
    change
  }
};

// form reducer
export const form = (state = {}, action) =&amp;gt; {
  switch (action.type) {
    case &amp;quot;FORM_CHANGE&amp;quot;:
      return {
          ...state,
          ...action.change
      }

    default:
        return state;
  }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I would like to share the solution that worked for me, my dear reader.&lt;/p&gt;

&lt;h2 id=&#34;clear-state-of-the-form-on-every-navigation&#34;&gt;Clear State of the Form on Every Navigation&lt;/h2&gt;

&lt;p&gt;First of all,  we need to create a new action &amp;ldquo;ROUTER.CHANGE&amp;rdquo; in the routes for handling router change:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;export const ROUTER = {
  CHANGE: &amp;quot;ROUTER_CHANGE&amp;quot;
};

export const changeRouter = (change) =&amp;gt; ({
  type: ROUTER.CHANGE,
  change
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Secondly, we should dispatch this action whenever the user navigates somewhere:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;hashHistory.listen(change =&amp;gt; store.dispatch(changeRouter(change)));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The next step is to add a new case &amp;ldquo;ROUTER.CHANGE&amp;rdquo; in the form reducer and clean up the current state, by returning an empty object:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// form reducer
export const form = (state = {}, action) =&amp;gt; {
  switch (action.type) {
    case &amp;quot;FORM_CHANGE&amp;quot;: ...

    case ROUTER.CHANGE:
       return {};

    default: ...
  }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Now the form state clears itself on every navigation. You can find the whole code change &lt;a href=&#34;https://github.com/ilonade/bookshelf/commit/f961552b2e0a35dcfd6a6b01e52b2b847cae7fa2&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thank you for reading!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>