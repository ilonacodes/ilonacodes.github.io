<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Localstorage on Ilona Who Codes</title>
    <link>//www.ilonacodes.com/tags/localstorage/index.xml</link>
    <description>Recent content in Localstorage on Ilona Who Codes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="//www.ilonacodes.com/tags/localstorage/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Persisting data using local storage with React&#43;Redux</title>
      <link>//www.ilonacodes.com/blog/persisting-data-using-local-storage-react-redux/</link>
      <pubDate>Tue, 10 Oct 2017 12:30:05 +0100</pubDate>
      
      <guid>//www.ilonacodes.com/blog/persisting-data-using-local-storage-react-redux/</guid>
      <description>&lt;p&gt;Let&amp;rsquo;s continue developing an Interactive ToDo List. Refer to the &lt;a href=&#34;//www.ilonacodes.com/blog/react-for-very-very-beginners/&#34;&gt;previous posts&lt;/a&gt; you notice that we are almost done with the basic functionality of the application. And today I would like to start the topic about persisting the data and restoring it after refreshing the page or starting a new session on the local machine with React+Redux.&lt;/p&gt;

&lt;p&gt;Changing into the &lt;code&gt;my-daily-todos&lt;/code&gt; project, then to &lt;code&gt;src&lt;/code&gt; folder where you find &lt;code&gt;index.js&lt;/code&gt;. Here we store all the app’s state in the &lt;code&gt;store&lt;/code&gt; variable. Now we are also going to add a new variable that will keep the initial state and a new constant &lt;code&gt;persistedState&lt;/code&gt; that allows us to get the persisted state from store passing to method &lt;code&gt;getItem&lt;/code&gt; of &lt;code&gt;localStorage&lt;/code&gt; =&amp;gt; &lt;code&gt;localStorage.getItem(&#39;reduxState&#39;)&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;So, the &lt;code&gt;initState&lt;/code&gt; variable has the default value – empty &lt;code&gt;{}&lt;/code&gt;. If there is no persisted state in the local storage, it is going to stay empty.&lt;/p&gt;

&lt;p&gt;On the other hand, when there is some persisted state in the local storage, we are going to load that state and set &lt;code&gt;initState&lt;/code&gt; to value, that we have just loaded.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// my-daily-todos/src/index.js

...

import { App } from &#39;./App.js&#39;;
import { tasksReducer } from &#39;./Tasks/reducers.js&#39;;
import &#39;./index.css&#39;;

let initState = {}
const persistedState = localStorage.getItem(&#39;reduxState&#39;)

// if persistedState is not empty then assign parsed persistedState to initState
if (persistedState) {
  initState = JSON.parse(persistedState)
}

...

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;span style=&#34;color:red&#34;&gt;Notice that we are passing the second parameter &lt;code&gt;initState&lt;/code&gt; to &lt;code&gt;createStore&lt;/code&gt; method in &lt;code&gt;store&lt;/code&gt;. The second parameter of &lt;code&gt;createStore&lt;/code&gt; function is for setting the initial state of the store when the application is launched:&lt;/span&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// my-daily-todos/src/index.js

...

let store = createStore(
  combineReducers({
    tasks: tasksReducer,
  }),
  initState
);

...

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Onward!&lt;/p&gt;

&lt;p&gt;We are going to use &lt;code&gt;subscribe&lt;/code&gt; method of our &lt;code&gt;store&lt;/code&gt;. That method will trigger the function we provide every time there is any change to the application state.&lt;/p&gt;

&lt;p&gt;We are going to supply a function that will get the whole state from the store using &lt;code&gt;getState()&lt;/code&gt; method of &lt;code&gt;store&lt;/code&gt;. Then it is going to convert that state object to a string using &lt;code&gt;JSON.stringify()&lt;/code&gt;. Finally, it is going to persist that state using &lt;code&gt;localStorage.setItem()&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// my-daily-todos/src/index.js

...

store.subscribe(() =&amp;gt; {
  localStorage.setItem(&#39;reduxState&#39;, JSON.stringify(store.getState()))
})

...

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s it.&lt;/p&gt;

&lt;p&gt;To check how it works run the local server on your computer in the project folder with the &lt;code&gt;npm start&lt;/code&gt; command. Afterwards, try to add and categorize some tasks by tags, then close the tab with the application or refresh the page to see that the data is stored successfully.&lt;/p&gt;

&lt;p&gt;Did you find another way how to implement it in our project? Let me know by &lt;a href=&#34;mailto:demiluri@gmail.com&#34;&gt;email&lt;/a&gt; or write me a direct message on &lt;a href=&#34;https://www.instagram.com/ilonacodes/&#34;&gt;Instagram&lt;/a&gt;. That is how the &lt;code&gt;index.js&lt;/code&gt; should look like now:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// my-daily-todos/src/index.js

import React from &#39;react&#39;;
import ReactDOM from &#39;react-dom&#39;;
import { Provider } from &#39;react-redux&#39;;
import { createStore, combineReducers } from &#39;redux&#39;;

import { App } from &#39;./App.js&#39;;
import { tasksReducer } from &#39;./Tasks/reducers.js&#39;;
import &#39;./index.css&#39;;

let initState = {}
const persistedState = localStorage.getItem(&#39;reduxState&#39;)
if (persistedState) {
  initState = JSON.parse(persistedState)
}

let store = createStore(
  combineReducers({
    tasks: tasksReducer,
  }),
  initState
);

store.subscribe(() =&amp;gt; {
  localStorage.setItem(&#39;reduxState&#39;, JSON.stringify(store.getState()))
})

ReactDOM.render(
  &amp;lt;Provider store={store}&amp;gt;
    &amp;lt;App /&amp;gt;
  &amp;lt;/Provider&amp;gt;,
  document.getElementById(&#39;root&#39;)
);

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you enjoyed this post, I would be very grateful if you would help me spread the word by emailing it to a friend or sharing it on social networks. Thank you!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>