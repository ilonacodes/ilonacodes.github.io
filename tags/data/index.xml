<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Data on Ilona Who Codes</title>
    <link>//www.ilonacodes.com/tags/data/</link>
    <description>Recent content in Data on Ilona Who Codes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 02 Oct 2018 10:40:05 +0100</lastBuildDate>
    
	<atom:link href="//www.ilonacodes.com/tags/data/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Simple State Machine with Redux</title>
      <link>//www.ilonacodes.com/blog/simple-state-machine-with-redux/</link>
      <pubDate>Tue, 02 Oct 2018 10:40:05 +0100</pubDate>
      
      <guid>//www.ilonacodes.com/blog/simple-state-machine-with-redux/</guid>
      <description>&lt;figure&gt;
    
        &lt;img src=&#34;//www.ilonacodes.com/blog/simple-state-machine-with-redux.jpeg&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;https://bit.ly/2wIeeNU&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;p&gt;The last days I am working on the project, which should include the state machine. Implementing this project with React, I decided to use the Redux framework to manage state in my React application. Moreover, thanks to redux store we can debug data (in one place) easily.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Persisting data using local storage with React&#43;Redux</title>
      <link>//www.ilonacodes.com/blog/persisting-data-using-local-storage-react-redux/</link>
      <pubDate>Tue, 10 Oct 2017 12:30:05 +0100</pubDate>
      
      <guid>//www.ilonacodes.com/blog/persisting-data-using-local-storage-react-redux/</guid>
      <description>Let&amp;rsquo;s continue developing an Interactive ToDo List. Refer to the previous posts you notice that we are almost done with the basic functionality of the application. And today I would like to start the topic about persisting the data and restoring it after refreshing the page or starting a new session on the local machine with React+Redux.
Changing into the my-daily-todos project, then to src folder where you find index.js. Here we store all the appâ€™s state in the store variable.</description>
    </item>
    
  </channel>
</rss>