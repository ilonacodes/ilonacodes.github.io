<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blogs on Ilona Who Codes</title>
    <link>https://ilonacodes.github.io/blog/index.xml</link>
    <description>Recent content in Blogs on Ilona Who Codes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 08 Jul 2017 20:25:05 +0100</lastBuildDate>
    <atom:link href="https://ilonacodes.github.io/blog/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>CSS Sticky Footer</title>
      <link>https://ilonacodes.github.io/blog/css-sticky-footer/</link>
      <pubDate>Sat, 08 Jul 2017 20:25:05 +0100</pubDate>
      
      <guid>https://ilonacodes.github.io/blog/css-sticky-footer/</guid>
      <description>&lt;p&gt;Hi there!&lt;/p&gt;

&lt;p&gt;There are a lot of ways how to implement a sticky footer on the page that will always remain at a fixed position on the screen no matter whether the user scroll or not. It will be visible all the time at that specific place (often on bottom).&lt;/p&gt;

&lt;p&gt;I would like to share my way how I added the sticky footer on my site.&lt;/p&gt;

&lt;p&gt;Firstly, I added two separated &lt;div&gt; tags inside the body in index.html and thereby assigning two classes .container and .footer to them:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;body&amp;gt;
  &amp;lt;div class=&amp;quot;container&amp;quot;&amp;gt;
    ...
  &amp;lt;/div&amp;gt;

  &amp;lt;div class=&amp;quot;footer&amp;quot;&amp;gt;
    ...
  &amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The next step is creating the CSS styles in the index.css file and styling these two containers from index.html, where .container will get a margin-bottom with the value equal to the size of the .footer:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.container {
  margin-bottom: 60px;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And then .footer styles will be consisted of the following properties:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.footer {
  width: 100%;
  position: fixed;
  left: 0;
  bottom: 0;
  margin: 0 auto;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s it. I hope this post helped you added a sticky (floating) footer to your site.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Clear Form in Redux when Navigating with React-Router</title>
      <link>https://ilonacodes.github.io/blog/clear-form-in-redux-when-navigating-with-react-router/</link>
      <pubDate>Sun, 19 Mar 2017 19:25:05 +0100</pubDate>
      
      <guid>https://ilonacodes.github.io/blog/clear-form-in-redux-when-navigating-with-react-router/</guid>
      <description>

&lt;p&gt;Hi there!&lt;/p&gt;

&lt;p&gt;I have worked on my project using a React-Redux architecture with React-Router for navigation. I have implemented forms for adding and editing resources. I have observed weird behavior:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Add new resource with a description: &amp;ldquo;Hello World!&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Start editing another resource with a description: &amp;ldquo;My new comment&amp;hellip;&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Input for description contains a previous value: &amp;ldquo;Hello World!&amp;rdquo;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I was expecting to see the current description of the resource: &amp;ldquo;My new comment&amp;hellip;&amp;rdquo;, not the value from the previous form.&lt;/p&gt;

&lt;p&gt;In my case, I was handling the state of the current form by using the same reducer:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// Change form action
export const changeForm = (name, value) =&amp;gt; {
  let change = {};
  change[name] = value;
  return {
    type: &amp;quot;FORM_CHANGE&amp;quot;,
    change
  }
};

// form reducer
export const form = (state = {}, action) =&amp;gt; {
  switch (action.type) {
    case &amp;quot;FORM_CHANGE&amp;quot;:
      return {
          ...state,
          ...action.change
      }

    default:
        return state;
  }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I would like to share the solution that worked for me, my dear reader.&lt;/p&gt;

&lt;h2 id=&#34;clear-state-of-the-form-on-every-navigation&#34;&gt;Clear State of the Form on Every Navigation&lt;/h2&gt;

&lt;p&gt;First of all,  we need to create a new action &amp;ldquo;ROUTER.CHANGE&amp;rdquo; in the routes for handling router change:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;export const ROUTER = {
  CHANGE: &amp;quot;ROUTER_CHANGE&amp;quot;
};

export const changeRouter = (change) =&amp;gt; ({
  type: ROUTER.CHANGE,
  change
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Secondly, we should dispatch this action whenever the user navigates somewhere:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;hashHistory.listen(change =&amp;gt; store.dispatch(changeRouter(change)));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The next step is to add a new case &amp;ldquo;ROUTER.CHANGE&amp;rdquo; in the form reducer and clean up the current state, by returning an empty object:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// form reducer
export const form = (state = {}, action) =&amp;gt; {
  switch (action.type) {
    case &amp;quot;FORM_CHANGE&amp;quot;: ...

    case ROUTER.CHANGE:
       return {};

    default: ...
  }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Now the form state clears itself on every navigation. You can find the whole code change &lt;a href=&#34;https://github.com/ilonade/bookshelf/commit/f961552b2e0a35dcfd6a6b01e52b2b847cae7fa2&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thank you for reading!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to Center Sign Up Form in 3 Simple Steps</title>
      <link>https://ilonacodes.github.io/blog/how-to-center-sign-up-form-in-3-simple-steps/</link>
      <pubDate>Sun, 12 Mar 2017 16:34:40 +0100</pubDate>
      
      <guid>https://ilonacodes.github.io/blog/how-to-center-sign-up-form-in-3-simple-steps/</guid>
      <description>

&lt;p&gt;Hi, everyone!&lt;/p&gt;

&lt;p&gt;I am very happy to welcome you on my blog. A couple of days ago I started creating my new project (that I will have presented to you in a couple of weeks). And I have faced the following problem: I wanted to build a page with Sign Up form, and this page doesn&amp;rsquo;t have any other content.  In that case, it made a lot of sense to center the form, both horizontally and vertically. First of all, I have done some research, tried some solutions, and I want to present what worked for me.&lt;/p&gt;

&lt;h2 id=&#34;step-1-set-up-correct-markup-structure&#34;&gt;Step 1:  Set up correct markup structure&lt;/h2&gt;

&lt;p&gt;My form had both header and form elements, so I had to wrap it in a &amp;ldquo;div&amp;rdquo; container with a particular class so that I can style it:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div class=&amp;quot;sign-up-form&amp;quot;&amp;gt;
    &amp;lt;h1 class=&amp;quot;sign-up-title&amp;quot;&amp;gt;Sign Up&amp;lt;/h1&amp;gt;
    &amp;lt;form&amp;gt;
        &amp;lt;input type=&amp;quot;email&amp;quot; placeholder=&amp;quot;Email&amp;quot; name=&amp;quot;email&amp;quot;/&amp;gt;
        &amp;lt;input type=&amp;quot;password&amp;quot; placeholder=&amp;quot;Password&amp;quot; name=&amp;quot;password&amp;quot;/&amp;gt;
        &amp;lt;input type=&amp;quot;submit&amp;quot; value=&amp;quot;Continue&amp;quot;/&amp;gt;
    &amp;lt;/form&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This container (with class &amp;ldquo;sign-up-form&amp;rdquo;) is the one that we want to center. Therefore, we need also to wrap it in another container (with class &amp;ldquo;center-container&amp;rdquo;) inside which we are centering:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div class=&amp;quot;center-container&amp;quot;&amp;gt;
    &amp;lt;div class=&amp;quot;sign-up-form&amp;quot;&amp;gt;
            ...
    &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;step-2-preparing-the-page-for-centering&#34;&gt;Step 2: Preparing the page for centering&lt;/h2&gt;

&lt;p&gt;The page should occupy the full screen so that we can center the form. That means we need give the page correct size, margins, and paddings:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;html, body {
    margin: 0;
    padding: 0;
    width: 100%;
    height: 100%;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To be able to center the form container we can add &amp;ldquo;display: table&amp;rdquo;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;html, body {
    margin: 0;
    padding: 0;
    width: 100%;
    height: 100%;
    display: table;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;step-3-center-the-form-container&#34;&gt;Step 3: Center the form container&lt;/h2&gt;

&lt;p&gt;Now we are going to center the form vertically and horizontally:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.center-container {
    display: table-cell;
    text-align: center;
    vertical-align: middle;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Also, we have to make the form container of the same size as its content. For that, we can use &amp;ldquo;display: table&amp;rdquo; and &amp;ldquo;margin: 0 auto&amp;rdquo;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.sign-up-form {
    display: table;
    margin: 0 auto;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;That&amp;rsquo;s it. Now we can center our sign up form.&lt;/p&gt;

&lt;p&gt;Thank you for reading.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>